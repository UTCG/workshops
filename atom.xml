<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>UTCG Workshops</title>
 <link href="https://utcg.github.io/workshops/atom.xml" rel="self"/>
 <link href="https://utcg.github.io/workshops/"/>
 <updated>2022-01-31T01:49:52+01:00</updated>
 <id>https://utcg.github.io</id>
 <author>
   <name>UofT Computer Graphics Club</name>
   <email></email>
 </author>

 
 <entry>
   <title>Shaders</title>
   <link href="https://utcg.github.io/workshops/2022/02/10/shaders"/>
   <updated>2022-02-10T00:00:00+01:00</updated>
   <id>https://utcg.github.io/2022/02/10/shaders</id>
   <content type="html">&lt;h1 id=&quot;utcg-shaders-workshop&quot;&gt;UTCG Shaders Workshop&lt;/h1&gt;

&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;

&lt;h3 id=&quot;what-is-a-shader&quot;&gt;What is a shader?&lt;/h3&gt;

&lt;p&gt;A &lt;em&gt;pixel shader&lt;/em&gt; (aka &lt;em&gt;fragment shader&lt;/em&gt;) is code that runs for each pixel being rendered. There are other types of shaders (e.g. vertex shaders, geometry shaders, etc) but we won’t cover them today. Generally, they’re code that runs on the GPU, usually for rendering graphics. GPUs are great for shaders, because they’re made for doing similar work for lots of different inputs - in this case, they’ll run the same shader code for each pixel on the screen.&lt;/p&gt;

&lt;h2 id=&quot;fragment-shader-basics---mandelbrot-set&quot;&gt;Fragment shader basics - Mandelbrot set&lt;/h2&gt;

&lt;p&gt;To learn the basics, let’s start by rendering the &lt;a href=&quot;https://en.wikipedia.org/wiki/Mandelbrot_set&quot;&gt;Mandelbrot set&lt;/a&gt;. Here’s some &lt;a href=&quot;https://www.shadertoy.com/view/NdsyDX&quot;&gt;starter code&lt;/a&gt; - we won’t be paying much attention to the math, so the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mandel()&lt;/code&gt; function is provided.&lt;/p&gt;

&lt;h3 id=&quot;what-are-we-doing&quot;&gt;What are we doing?&lt;/h3&gt;

&lt;p&gt;Our fragment shader’s input is a pixel on the screen and its output is its colour, as a 4D RGBA vector - that’s Red/Green/Blue/Alpha.&lt;/p&gt;

&lt;div class=&quot;language-glsl highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mainImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;vec4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fragColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;vec2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fragCoord&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;[put in rest of mandel stuff]&lt;/p&gt;

&lt;h2 id=&quot;rotation-time-and-circles---analogue-clock&quot;&gt;Rotation, Time, and Circles - Analogue Clock&lt;/h2&gt;

&lt;p&gt;Our next example is an analogue clock. Here’s some &lt;a href=&quot;https://www.shadertoy.com/view/fdlyz2&quot;&gt;starter code&lt;/a&gt; - we’ve created a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uv&lt;/code&gt; variable for you, to give you the coordinates of the pixel from the centre of the screen. Here’s the &lt;a href=&quot;https://www.shadertoy.com/view/fslcR2&quot;&gt;finished shader&lt;/a&gt; for reference.&lt;/p&gt;

&lt;h3 id=&quot;creating-the-clock-face&quot;&gt;Creating the clock face&lt;/h3&gt;

&lt;p&gt;Clocks are circles. This is basic anthropology. But what is a circle?&lt;/p&gt;

&lt;p&gt;A circle is all the points within some radius $r$ of the centre of the circle $\mathbf c$. So if we have a pixel whose coordinates are $\mathbf p = (x, y)$, then we can check if the pixel is within the circle by checking if $\text{length}(\mathbf p - \mathbf c) &amp;lt; r$. Let’s do that in our code.&lt;/p&gt;

&lt;p&gt;Let’s set the centre of our clock to be the centre of the screen, and give it a radius of 0.4:&lt;/p&gt;

&lt;div class=&quot;language-glsl highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;vec2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clockCentre&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;vec2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clockRadius&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And now, let’s use the GLSL &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;length&lt;/code&gt; function to implement the circle formula and colour the clock face red:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if (length(uv - clockCentre) &amp;lt; clockRadius)
{
	col = vec3(1., 0.5, 0.5);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you render now, you should see a big red circle in the middle of the screen!&lt;/p&gt;

&lt;h3 id=&quot;initializing-the-seconds-hand&quot;&gt;Initializing the seconds hand&lt;/h3&gt;

&lt;p&gt;The initial position of a clock hand, at time 0 is pointing straight up, so let’s create an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;up&lt;/code&gt; vector to represent that:&lt;/p&gt;

&lt;div class=&quot;language-glsl highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;vec2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;up&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;vec2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now let’s render it as a small white dot, the same way we rendered the clock face:&lt;/p&gt;

&lt;div class=&quot;language-glsl highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;vec2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secondsHand&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;up&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handRadius&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;02&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// put the following code AFTER the clock face colour code&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secondsHand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handRadius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;col&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;vec3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;making-it-move&quot;&gt;Making it move&lt;/h3&gt;

&lt;p&gt;Using linear algebra, we’ve created a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rot()&lt;/code&gt; function which returns a matrix that will rotate a 2D vector clockwise by a given angle in radians (&lt;a href=&quot;https://en.wikipedia.org/wiki/Rotation_matrix&quot;&gt;more on rotation matrices&lt;/a&gt;. To get a rotated vector, you multiply a rotation matrix times a vector. For example,&lt;/p&gt;

&lt;div class=&quot;language-glsl highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;vec2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;northEast&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;vec2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;vec2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;southEast&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_PI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;northEast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In our case, we want to rotate our clock hand by some angle based on time. GLSL gives us a handy variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iTime&lt;/code&gt;, which is the time in seconds since we started the shader. Let’s try it out by editing our seconds hand’s position:&lt;/p&gt;

&lt;div class=&quot;language-glsl highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;vec2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secondsHand&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;up&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;getting-the-speed-right&quot;&gt;Getting the speed right&lt;/h3&gt;

&lt;p&gt;Great, it’s rotating! But it’s the wrong speed. One full rotation is $2\pi$ (aka &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2. * M_PI&lt;/code&gt;) radians, and it takes 60 seconds, so we’ll rotate our seconds hand correspondingly:&lt;/p&gt;

&lt;div class=&quot;language-glsl highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seconds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;vec2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secondsHand&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seconds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_PI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;up&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 60 seconds for a rotation&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we have a seconds hand! Let’s try a minutes hand next, using the same strategy:&lt;/p&gt;

&lt;div class=&quot;language-glsl highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minutes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seconds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;vec2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minutesHand&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minutes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_PI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;up&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 60 mins for a rotation&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minutesHand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handRadius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;col&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;vec3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Try doing an hour hand yourself!&lt;/p&gt;

&lt;h3 id=&quot;extras&quot;&gt;Extras&lt;/h3&gt;

&lt;p&gt;To make it even more clock-like, see if you can use the GLSL &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;floor()&lt;/code&gt; function to make the seconds hand “tick” instead of rotating smoothly.&lt;/p&gt;

&lt;p&gt;You can also make it look better by changing the lengths of the hands, so that they never overlap.&lt;/p&gt;

&lt;p&gt;Another aesthetic upgrade might be a bezel, or patterns on the clock face. Numbers are a bit more difficult, but look into textures if you have some time and wanna try it out.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Blender Workshop Part 2 Recording</title>
   <link href="https://utcg.github.io/workshops/2021/11/01/blender-part2"/>
   <updated>2021-11-01T00:00:00+01:00</updated>
   <id>https://utcg.github.io/2021/11/01/blender-part2</id>
   <content type="html">&lt;h1 id=&quot;utcg-blender-violin-workshop-part-2&quot;&gt;UTCG Blender Violin Workshop Part 2&lt;/h1&gt;

&lt;p&gt;Here’s the recording for Part 2 of UTCG’s Blender Workshop on October 29, 2021.&lt;/p&gt;

&lt;p&gt;If the video doesn’t work you can &lt;a href=&quot;https://github.com/UTCG/workshops/releases/download/v.1.0.2/Blender2.mp4&quot;&gt;download it&lt;/a&gt;.&lt;/p&gt;

&lt;video style=&quot;max-width:100%&quot; controls=&quot;&quot; src=&quot;https://github.com/UTCG/workshops/releases/download/v.1.0.2/Blender2.mp4&quot;&gt;&lt;/video&gt;

&lt;p&gt;You can also download the &lt;a href=&quot;https://github.com/UTCG/workshops/releases/download/v.1.0.2/Workshop2Start.blend&quot;&gt;Blender file&lt;/a&gt; that we started with in the workshop!
(You also might want this &lt;a href=&quot;https://upload.wikimedia.org/wikipedia/commons/1/1b/Violin_VL100.png&quot;&gt;violin reference image&lt;/a&gt;, put it in the same folder as the .blend file)&lt;/p&gt;

&lt;p&gt;Here’s a finished render.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/UTCG/workshops/releases/download/v.1.0.2/RenderTest.png&quot; width=&quot;400px&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Blender Workshop Recording</title>
   <link href="https://utcg.github.io/workshops/2021/10/24/blender-recording"/>
   <updated>2021-10-24T00:00:00+02:00</updated>
   <id>https://utcg.github.io/2021/10/24/blender-recording</id>
   <content type="html">&lt;h1 id=&quot;utcg-blender-violin-workshop&quot;&gt;UTCG Blender Violin Workshop&lt;/h1&gt;

&lt;p&gt;Here’s the recording for Part 1 of UTCG’s Blender Workshop on October 22, 2021.&lt;/p&gt;

&lt;p&gt;If the video doesn’t work you can &lt;a href=&quot;https://github.com/UTCG/workshops/releases/download/v1.0.1/Blender.mp4&quot;&gt;download it&lt;/a&gt;.&lt;/p&gt;

&lt;video style=&quot;max-width:100%&quot; controls=&quot;&quot; src=&quot;https://github.com/UTCG/workshops/releases/download/v1.0.1/Blender.mp4&quot;&gt;&lt;/video&gt;

&lt;p&gt;You can also download the &lt;a href=&quot;https://github.com/UTCG/workshops/releases/download/v1.0.1/Workshop1.blend&quot;&gt;Blender file&lt;/a&gt; that was used in the workshop!
(You also might want this &lt;a href=&quot;https://upload.wikimedia.org/wikipedia/commons/1/1b/Violin_VL100.png&quot;&gt;violin reference image&lt;/a&gt;, put it in the same folder as the .blend file)&lt;/p&gt;
</content>
 </entry>
 

</feed>
