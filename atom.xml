<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>UTCG Workshops</title>
 <link href="https://utcg.github.io/workshops/atom.xml" rel="self"/>
 <link href="https://utcg.github.io/workshops/"/>
 <updated>2022-03-01T21:52:23+01:00</updated>
 <id>https://utcg.github.io</id>
 <author>
   <name>UofT Computer Graphics Club</name>
   <email></email>
 </author>

 
 <entry>
   <title>Model UofT session 1 recording</title>
   <link href="https://utcg.github.io/workshops/2022/03/01/model1"/>
   <updated>2022-03-01T00:00:00+01:00</updated>
   <id>https://utcg.github.io/2022/03/01/model1</id>
   <content type="html">&lt;h1 id=&quot;model-uoft---session-1&quot;&gt;Model UofT - session 1&lt;/h1&gt;

&lt;p&gt;Here’s the recording for the first session of UTCG’s Model UofT project, on February 28, 2022.&lt;/p&gt;

&lt;video style=&quot;max-width:100%&quot; controls=&quot;&quot; src=&quot;https://github.com/UTCG/workshops/releases/download/v1.1.1/Model1.mp4&quot;&gt;&lt;/video&gt;
</content>
 </entry>
 
 <entry>
   <title>Shaders</title>
   <link href="https://utcg.github.io/workshops/2022/02/10/shaders"/>
   <updated>2022-02-10T00:00:00+01:00</updated>
   <id>https://utcg.github.io/2022/02/10/shaders</id>
   <content type="html">&lt;style&gt;
    .red &gt; code {
        color: #FF8080;
    }
    .blue &gt; code {
        color: #4080FF;
    }
&lt;/style&gt;

&lt;h1 id=&quot;utcg-shaders-workshop&quot;&gt;UTCG Shaders Workshop&lt;/h1&gt;

&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;

&lt;h3 id=&quot;what-are-we-gonna-cover&quot;&gt;What are we gonna cover?&lt;/h3&gt;

&lt;p&gt;This workshop covers the basics of 2D shader programming in GLSL. We’re hoping that by the end of the workshop, you have a good enough grasp on shader programming that you can make your own animated noise art, and get started working on more complicated shaders for your own graphics and game development projects (or Minecraft). Here are some examples of shaders we made using only the techniques covered in this workshop:&lt;/p&gt;

&lt;iframe width=&quot;640&quot; height=&quot;360&quot; frameborder=&quot;0&quot; src=&quot;https://www.shadertoy.com/embed/fsSyDd?gui=true&amp;amp;t=10&amp;amp;paused=true&amp;amp;muted=false&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;(we’ve turned off autoplay for this one, make sure to click the ⏮ button to restart and then the ▶️ button to play it)&lt;/p&gt;

&lt;iframe width=&quot;640&quot; height=&quot;360&quot; frameborder=&quot;0&quot; src=&quot;https://www.shadertoy.com/embed/sdSczG?gui=true&amp;amp;t=10&amp;amp;paused=false&amp;amp;muted=false&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;iframe width=&quot;640&quot; height=&quot;360&quot; frameborder=&quot;0&quot; src=&quot;https://www.shadertoy.com/embed/fdSyDd?gui=true&amp;amp;t=10&amp;amp;paused=false&amp;amp;muted=false&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;We hope that you follow along through the code during the workshop, whether you’re writing it yourself with us or uncommenting lines as we write them. Below is all the code we’ll be using:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Part 1: Mandelbrot
    &lt;ul&gt;
      &lt;li&gt;Minimal starter code: &lt;a href=&quot;https://www.shadertoy.com/view/NdSyW3&quot;&gt;https://www.shadertoy.com/view/NdSyW3&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;Starter code with finished example commented out: &lt;a href=&quot;https://www.shadertoy.com/view/NdsyDX&quot;&gt;https://www.shadertoy.com/view/NdsyDX&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;Finished code: &lt;a href=&quot;https://www.shadertoy.com/view/fsSyW3&quot;&gt;https://www.shadertoy.com/view/fsSyW3&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Part 2: Clock
    &lt;ul&gt;
      &lt;li&gt;Minimal starter code: &lt;a href=&quot;https://www.shadertoy.com/view/NsSyW3&quot;&gt;https://www.shadertoy.com/view/NsSyW3&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;Starter code with finished example commented out: &lt;a href=&quot;https://www.shadertoy.com/view/fsByW3&quot;&gt;https://www.shadertoy.com/view/fsByW3&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;Finished code: &lt;a href=&quot;https://www.shadertoy.com/view/fdByW3&quot;&gt;https://www.shadertoy.com/view/fdByW3&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Part 3: Noise art
    &lt;ul&gt;
      &lt;li&gt;Starter code: &lt;a href=&quot;https://www.shadertoy.com/view/7s2yzy&quot;&gt;https://www.shadertoy.com/view/7s2yzy&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;Example finished code: &lt;a href=&quot;https://www.shadertoy.com/view/ssScDw&quot;&gt;https://www.shadertoy.com/view/ssScDw&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Competition
    &lt;ul&gt;
      &lt;li&gt;Starter code: &lt;a href=&quot;https://www.shadertoy.com/view/fsBcWd&quot;&gt;https://www.shadertoy.com/view/fsBcWd&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;what-is-a-shader&quot;&gt;What is a shader?&lt;/h3&gt;

&lt;p&gt;A &lt;em&gt;pixel shader&lt;/em&gt; (aka &lt;em&gt;fragment shader&lt;/em&gt;) is code that runs for each pixel being rendered. There are other types of shaders (e.g. vertex shaders, geometry shaders, etc) but we won’t cover them in this workshop. Generally, they’re code that runs on the GPU, usually for rendering graphics. In games, they’re usually used for lighting effects (they are called shaders) and other fancy effects at the end of the rendering pipeline. GPUs are great for shaders, because they’re made for doing similar work for lots of different inputs - in this case, they’ll run the same shader code for each pixel on the screen.&lt;/p&gt;

&lt;h3 id=&quot;coding-shaders&quot;&gt;Coding shaders&lt;/h3&gt;

&lt;p&gt;Shaders are usually written in &lt;em&gt;GLSL&lt;/em&gt;, which is &lt;em&gt;OpenGL Shading Language&lt;/em&gt;. It’s kind of like C/C++. This is the language that Minecraft shaders use!&lt;/p&gt;

&lt;p&gt;One important thing to note is that it does not automatically convert between integers and floats. So it will throw an error if you do something like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;float x = 2;&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;float y = M_PI / 2&lt;/code&gt;. To deal with this, always put a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.&lt;/code&gt; after an integer, e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;float x = 2.&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;float y = M_PI / 2.&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;fragment-shader-basics-transformations-colour---mandelbrot-set&quot;&gt;Fragment shader basics, Transformations, Colour - Mandelbrot Set&lt;/h2&gt;

&lt;p&gt;To learn the basics, let’s start by rendering the &lt;a href=&quot;https://en.wikipedia.org/wiki/Mandelbrot_set&quot;&gt;Mandelbrot set&lt;/a&gt;. We’ve provided some starter code, linked below. We won’t be paying much attention to the mathematics behind the Mandelbrot set, so the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mandel()&lt;/code&gt; function is provided (and you don’t need to understand it).&lt;/p&gt;

&lt;iframe width=&quot;640&quot; height=&quot;360&quot; frameborder=&quot;0&quot; src=&quot;https://www.shadertoy.com/embed/fsSyW3?gui=true&amp;amp;t=10&amp;amp;paused=true&amp;amp;muted=false&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Code:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Minimal starter code: &lt;a href=&quot;https://www.shadertoy.com/view/NdSyW3&quot;&gt;https://www.shadertoy.com/view/NdSyW3&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Starter code with finished example commented out: &lt;a href=&quot;https://www.shadertoy.com/view/NdsyDX&quot;&gt;https://www.shadertoy.com/view/NdsyDX&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Finished code: &lt;a href=&quot;https://www.shadertoy.com/view/fsSyW3&quot;&gt;https://www.shadertoy.com/view/fsSyW3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;what-does-our-shader-need-to-do&quot;&gt;What does our shader need to do?&lt;/h3&gt;

&lt;p&gt;Our fragment shader’s input is a pixel on the screen and its output is its colour, as a 4D RGBA (Red/Green/Blue/Alpha) vector.&lt;/p&gt;

&lt;div class=&quot;language-glsl highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mainImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;vec4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fragColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;vec2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fragCoord&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We’ve given a variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vec2 uv&lt;/code&gt; to represent the transformed coordinates of a pixel. We’ll use it and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mandel()&lt;/code&gt; to calculate the colour for each pixel.&lt;/p&gt;

&lt;div class=&quot;language-glsl highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mainImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;vec4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fragColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;vec2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fragCoord&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;vec2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fragCoord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iResolution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// mandel returns a value between 0 and 1&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mandel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;vec3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;col&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;vec3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;fragColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;vec4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;col&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Since we’ve put &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;value&lt;/code&gt; into the R/G/B parts of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;col&lt;/code&gt;, the resulting image should be in greyscale.&lt;/p&gt;

&lt;h3 id=&quot;transformation&quot;&gt;Transformation&lt;/h3&gt;

&lt;p&gt;We mentioned that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uv&lt;/code&gt; are the transformed coordinates. You might recall from high school that we can transform coordinates by multiplying/dividing our vector by a number to stretch, or by adding/subtracting another vector to shift. Try doing this yourself to get the whole set in the frame!&lt;/p&gt;

&lt;div class=&quot;language-glsl highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mainImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;vec4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fragColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;vec2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fragCoord&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;vec2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;vec2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fragCoord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hrztl_stretch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hrztl_shift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                   &lt;span class=&quot;n&quot;&gt;fragCoord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vrtcl_stretch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vrtcl_shift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;working-with-colour---mix&quot;&gt;Working with colour - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix()&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;We can make other colours by putting different values into the R/G/B parts of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;col&lt;/code&gt;, e.g. &lt;span class=&quot;red&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;red = vec3(1., .5, .5)&lt;/code&gt;&lt;/span&gt; or &lt;span class=&quot;blue&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;blue = vec3(.25, .5, 1.)&lt;/code&gt;&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;We can also interpolate between colours (or really anything) using the GLSL function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix()&lt;/code&gt;. The first two arguments are the values we want to interpolate between, and the last is the “slider value” to “slide” between the two, from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-glsl highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;vec3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;red&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;vec3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;vec3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;vec3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;vec3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;col&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mandel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;extras&quot;&gt;Extras&lt;/h3&gt;

&lt;p&gt;Throw &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sin()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cos()&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iTime&lt;/code&gt; into your colour calculation and we’ve got a rave going!&lt;/p&gt;

&lt;h2 id=&quot;rotation-time-circles---analogue-clock&quot;&gt;Rotation, Time, Circles - Analogue Clock&lt;/h2&gt;

&lt;p&gt;Our next example is an analogue clock.&lt;/p&gt;

&lt;iframe width=&quot;640&quot; height=&quot;360&quot; frameborder=&quot;0&quot; src=&quot;https://www.shadertoy.com/embed/fdByW3?gui=true&amp;amp;t=10&amp;amp;paused=false&amp;amp;muted=false&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Code:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Minimal starter code: &lt;a href=&quot;https://www.shadertoy.com/view/NsSyW3&quot;&gt;https://www.shadertoy.com/view/NsSyW3&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Starter code with finished example commented out: &lt;a href=&quot;https://www.shadertoy.com/view/fsByW3&quot;&gt;https://www.shadertoy.com/view/fsByW3&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Finished code: &lt;a href=&quot;https://www.shadertoy.com/view/fdByW3&quot;&gt;https://www.shadertoy.com/view/fdByW3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that this time we’ve transformed the pixel coordinates for you, so that the centre of the screen has coordinates $(0, 0)$.&lt;/p&gt;

&lt;h3 id=&quot;creating-the-clock-face&quot;&gt;Creating the clock face&lt;/h3&gt;

&lt;p&gt;Clocks are circles. This is basic anthropology. But what is a circle?&lt;/p&gt;

&lt;p&gt;A circle is all the points within some radius $r$ of the centre of the circle $\mathbf c$. So if we have a pixel whose coordinates are $\mathbf p = (x, y)$, then we can check if the pixel is within the circle by checking if $\text{length}(\mathbf p - \mathbf c) &amp;lt; r$. Let’s make a function to do that using the GLSL &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;length()&lt;/code&gt; function:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bool isInCircle(vec2 centre, float radius, vec2 point)
{
    // return true if point is closer to centre than r
    return length(point - centre) &amp;lt; radius;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s set the centre of our clock to be the centre of the screen, and give it a radius of 0.4:&lt;/p&gt;

&lt;div class=&quot;language-glsl highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;vec2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clockCentre&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;vec2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clockRadius&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And now, let’s use our circle function to colour the clock face red:&lt;/p&gt;

&lt;div class=&quot;language-glsl highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isInCircle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clockCentre&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clockRadius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;col&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;vec3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you render now, you should see a big red circle in the middle of the screen!&lt;/p&gt;

&lt;h3 id=&quot;initializing-the-seconds-hand&quot;&gt;Initializing the seconds hand&lt;/h3&gt;

&lt;p&gt;The initial position of a clock hand, at time 0 is pointing straight up, so let’s create an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;up&lt;/code&gt; vector to represent that:&lt;/p&gt;

&lt;div class=&quot;language-glsl highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;vec2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;up&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;vec2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now let’s render it as a small white dot, the same way we rendered the clock face:&lt;/p&gt;

&lt;div class=&quot;language-glsl highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;vec2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secondsHand&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;up&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handRadius&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;02&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// put the following code AFTER the clock face colour code&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isInCircle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secondsHand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handRadius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;col&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;vec3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;making-it-move&quot;&gt;Making it move&lt;/h3&gt;

&lt;p&gt;Using linear algebra, we’ve created a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rot()&lt;/code&gt; function which returns a matrix that will rotate a 2D vector clockwise by a given angle in radians (&lt;a href=&quot;https://en.wikipedia.org/wiki/Rotation_matrix&quot;&gt;more on rotation matrices&lt;/a&gt;). To get a rotated vector, you multiply a rotation matrix times a vector. For example,&lt;/p&gt;

&lt;div class=&quot;language-glsl highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;vec2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;northEast&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;vec2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;vec2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;southEast&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_PI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;northEast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In our case, we want to rotate our clock hand by some angle based on time. GLSL gives us a handy variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iTime&lt;/code&gt;, which is the time in seconds since we started the shader. Let’s try it out by editing our seconds hand’s position:&lt;/p&gt;

&lt;div class=&quot;language-glsl highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;vec2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secondsHand&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;up&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;getting-the-speed-right&quot;&gt;Getting the speed right&lt;/h3&gt;

&lt;p&gt;Great, it’s rotating! But it’s the wrong speed. One full rotation is $2\pi$ (aka &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2. * M_PI&lt;/code&gt;) radians, and it takes 60 seconds, so we’ll rotate our seconds hand correspondingly:&lt;/p&gt;

&lt;div class=&quot;language-glsl highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seconds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 60 seconds for a rotation&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;vec2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secondsHand&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seconds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_PI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;up&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we have a seconds hand! Let’s try a minutes hand next, using the same strategy:&lt;/p&gt;

&lt;div class=&quot;language-glsl highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minutes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seconds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 60 mins for a rotation&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;vec2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minutesHand&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minutes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_PI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;up&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isInCircle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minutesHand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handRadius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;col&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;vec3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Try doing an hour hand yourself!&lt;/p&gt;

&lt;h3 id=&quot;extras-1&quot;&gt;Extras&lt;/h3&gt;

&lt;p&gt;To make the clock show the actual time, take a look at the GLSL &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iDate&lt;/code&gt; variable. Note that this is a 4D vector. To make it even more clock-like, see if you can use the GLSL &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;floor()&lt;/code&gt; function to make the seconds hand “tick” instead of rotating smoothly.&lt;/p&gt;

&lt;p&gt;You can also make it look better by changing the lengths of the hands, so that they never overlap. Other aesthetic upgrades could be a bezel, or patterns on the clock face. Numbers are a bit more difficult, but look into textures if you have some time and wanna try it out.&lt;/p&gt;

&lt;h2 id=&quot;using-sin-and-cos-creatively---noise-art&quot;&gt;Using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sin()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cos()&lt;/code&gt; creatively - Noise art&lt;/h2&gt;

&lt;p&gt;The goal of this workshop was to give you enough shaders knowledge to make cool noise art, like this:&lt;/p&gt;

&lt;iframe width=&quot;640&quot; height=&quot;360&quot; frameborder=&quot;0&quot; src=&quot;https://www.shadertoy.com/embed/ssScDw?gui=true&amp;amp;t=10&amp;amp;paused=false&amp;amp;muted=false&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;How do we do this?&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;Just kinda messing around tbh.&lt;/p&gt;

&lt;p&gt;Code:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Starter code for example: &lt;a href=&quot;https://www.shadertoy.com/view/7s2yzy&quot;&gt;https://www.shadertoy.com/view/7s2yzy&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Example finished code: &lt;a href=&quot;https://www.shadertoy.com/view/ssScDw&quot;&gt;https://www.shadertoy.com/view/ssScDw&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Competition starter code: &lt;a href=&quot;https://www.shadertoy.com/view/fsBcWd&quot;&gt;https://www.shadertoy.com/view/fsBcWd&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;creating-patterns-with-functions&quot;&gt;Creating patterns with functions&lt;/h3&gt;

&lt;p&gt;We know we can &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix()&lt;/code&gt; two colours as long as we have a value between &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;. And since the trigonometric functions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sin()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cos()&lt;/code&gt; are periodic, we can use them to create patterns. We can also combine them in weird ways to get unexpected patterns.&lt;/p&gt;

&lt;div class=&quot;language-glsl highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;noiseFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;something&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/7/71/Sine_cosine_one_period.svg&quot; alt=&quot;Sine and Cosine graph by Geek3 from Wikipedia&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sin()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cos()&lt;/code&gt; both range between &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-1&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;, so we need to transform them to the range we want.&lt;/p&gt;

&lt;div class=&quot;language-glsl highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;noiseFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(...);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// transform cos value so that it's between 0 and 1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What do we put inside that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cos()&lt;/code&gt; function? Anything basically. Go crazy. Just do random stuff. Better if you mix &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iTime&lt;/code&gt;, more trigonometry, etc in there. Here’s what I did for the example above:&lt;/p&gt;

&lt;div class=&quot;language-glsl highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;noiseFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// transform cos value so that it's between 0 and 1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Feel free to mix more colours, to use if/else to render different things for different parts of the screen, use GLSL functions such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;length()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;floor()&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix()&lt;/code&gt;, use the functions we provided earlier such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mandel()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rot()&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;isInCircle()&lt;/code&gt;, and etc. Go crazy.&lt;/p&gt;

&lt;p&gt;When you’re done, submit your shader to the competition by listing it as “public” and adding the tag &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;utcg2022&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-end&quot;&gt;The end&lt;/h2&gt;

&lt;p&gt;That’s the end of the workshop, hope you learned a lot and had fun!&lt;/p&gt;

&lt;h3 id=&quot;what-you-can-do-with-this&quot;&gt;What you can do with this&lt;/h3&gt;

&lt;p&gt;If you scroll down on Shadertoy, at the bottom of the screen you’ll see a link to a &lt;a href=&quot;https://steamcommunity.com/sharedfiles/filedetails/?id=1726697188&quot;&gt;Screensaver&lt;/a&gt; plugin made by &lt;a href=&quot;https://www.shadertoy.com/user/kosro&quot;&gt;Kosro&lt;/a&gt;, which can be used to turn your shaders into a screensaver for Windows when installed on top of &lt;a href=&quot;https://store.steampowered.com/app/431960/Wallpaper_Engine/&quot;&gt;Wallpaper Engine&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;where-to-learn-more&quot;&gt;Where to learn more&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://thebookofshaders.com/&quot;&gt;The Book of Shaders&lt;/a&gt; is an incomplete resource on GLSL programming, but the pages it does have are excellent quality and easy to follow. They’re especially great if you’re interested in more complex noise art, like &lt;a href=&quot;https://thebookofshaders.com/edit.php#11/lava-lamp.frag&quot;&gt;this&lt;/a&gt; from page 11.&lt;/p&gt;

&lt;p&gt;The real heavyweight in shaders is Inigo Quiles, co-creator of Shadertoy. &lt;a href=&quot;https://www.iquilezles.org/index.html&quot;&gt;His website&lt;/a&gt; has articles, tutorials, demos, and more of graphics programming, including more noise art like &lt;a href=&quot;https://www.iquilezles.org/www/articles/warp/warp.htm&quot;&gt;this&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are many more tutorials on shaders that are just a search away, since GLSL is a very widely-used technology. Plus, they’re covered a little bit in &lt;a href=&quot;https://github.com/alecjacobson/computer-graphics-csc317&quot;&gt;CSC317 - Computer Graphics&lt;/a&gt; (formerly CSC418).&lt;/p&gt;

&lt;h3 id=&quot;thanks&quot;&gt;Thanks!&lt;/h3&gt;

&lt;p&gt;If you enjoyed this workshop, make sure you follow us on social media, join our mailing list, and join our Discord to keep up with our other events! You can find all of it on our website &lt;a href=&quot;https://utcg.club/&quot;&gt;utcg.club&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Blender Workshop Part 2 Recording</title>
   <link href="https://utcg.github.io/workshops/2021/11/01/blender-part2"/>
   <updated>2021-11-01T00:00:00+01:00</updated>
   <id>https://utcg.github.io/2021/11/01/blender-part2</id>
   <content type="html">&lt;h1 id=&quot;utcg-blender-violin-workshop-part-2&quot;&gt;UTCG Blender Violin Workshop Part 2&lt;/h1&gt;

&lt;p&gt;Here’s the recording for Part 2 of UTCG’s Blender Workshop on October 29, 2021.&lt;/p&gt;

&lt;p&gt;If the video doesn’t work you can &lt;a href=&quot;https://github.com/UTCG/workshops/releases/download/v.1.0.2/Blender2.mp4&quot;&gt;download it&lt;/a&gt;.&lt;/p&gt;

&lt;video style=&quot;max-width:100%&quot; controls=&quot;&quot; src=&quot;https://github.com/UTCG/workshops/releases/download/v.1.0.2/Blender2.mp4&quot;&gt;&lt;/video&gt;

&lt;p&gt;You can also download the &lt;a href=&quot;https://github.com/UTCG/workshops/releases/download/v.1.0.2/Workshop2Start.blend&quot;&gt;Blender file&lt;/a&gt; that we started with in the workshop!
(You also might want this &lt;a href=&quot;https://upload.wikimedia.org/wikipedia/commons/1/1b/Violin_VL100.png&quot;&gt;violin reference image&lt;/a&gt;, put it in the same folder as the .blend file)&lt;/p&gt;

&lt;p&gt;Here’s a finished render.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/UTCG/workshops/releases/download/v.1.0.2/RenderTest.png&quot; width=&quot;400px&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Blender Workshop Recording</title>
   <link href="https://utcg.github.io/workshops/2021/10/24/blender-recording"/>
   <updated>2021-10-24T00:00:00+02:00</updated>
   <id>https://utcg.github.io/2021/10/24/blender-recording</id>
   <content type="html">&lt;h1 id=&quot;utcg-blender-violin-workshop&quot;&gt;UTCG Blender Violin Workshop&lt;/h1&gt;

&lt;p&gt;Here’s the recording for Part 1 of UTCG’s Blender Workshop on October 22, 2021.&lt;/p&gt;

&lt;p&gt;If the video doesn’t work you can &lt;a href=&quot;https://github.com/UTCG/workshops/releases/download/v1.0.1/Blender.mp4&quot;&gt;download it&lt;/a&gt;.&lt;/p&gt;

&lt;video style=&quot;max-width:100%&quot; controls=&quot;&quot; src=&quot;https://github.com/UTCG/workshops/releases/download/v1.0.1/Blender.mp4&quot;&gt;&lt;/video&gt;

&lt;p&gt;You can also download the &lt;a href=&quot;https://github.com/UTCG/workshops/releases/download/v1.0.1/Workshop1.blend&quot;&gt;Blender file&lt;/a&gt; that was used in the workshop!
(You also might want this &lt;a href=&quot;https://upload.wikimedia.org/wikipedia/commons/1/1b/Violin_VL100.png&quot;&gt;violin reference image&lt;/a&gt;, put it in the same folder as the .blend file)&lt;/p&gt;
</content>
 </entry>
 

</feed>
