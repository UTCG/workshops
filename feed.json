{
    "version": "https://jsonfeed.org/version/1",
    "title": "UTCG Workshops",
    "home_page_url": "https://utcg.github.io/workshops/",
    "feed_url": "https://utcg.github.io/workshops/feed.json",
    "description": "UTCG workshops!",
    "icon": "https://utcg.github.io/workshops/apple-touch-icon.png",
    "favicon": "https://utcg.github.io/workshops/favicon.ico",
    "expired": false,
    
    "author":  {
        "name": "UofT Computer Graphics Club",
        "url": null,
        "avatar": null
    },
    
"items": [
    
        {
            "id": "https://utcg.github.io/workshops/2022/02/10/shaders",
            "title": "Shaders",
            "summary": null,
            "content_text": "UTCG Shaders WorkshopIntroWhat is a shader?A pixel shader (aka fragment shader) is code that runs for each pixel being rendered. There are other types of shaders (e.g. vertex shaders, geometry shaders, etc) but we won’t cover them today. Generally, they’re code that runs on the GPU, usually for rendering graphics. In games, they’re usually used for lighting effects (they are called shaders) and other fancy effects at the end of the rendering pipeline. GPUs are great for shaders, because they’re made for doing similar work for lots of different inputs - in this case, they’ll run the same shader code for each pixel on the screen.Coding shadersShaders are usually written in GLSL, which is OpenGL Shading Language. It’s kind of like C/C++. This is the language that Minecraft shaders use!One important thing to note is that it does not automatically convert between integers and floats. So it will throw an error if you do something like float x = 2; or float y = M_PI / 2. To deal with this, always put a . after an integer, e.g. float x = 2. and float y = M_PI / 2..Fragment shader basics, Trnasformations, Colour - Mandelbrot SetTo learn the basics, let’s start by rendering the Mandelbrot set. Here’s some starter code - we won’t be paying much attention to the math, so the mandel() function is provided (and you don’t need to understand it).TODO: ^replace that with iframe of actual shader laterWhat does our shader need to do?Our fragment shader’s input is a pixel on the screen and its output is its colour, as a 4D RGBA (Red/Green/Blue/Alpha) vector.void mainImage( out vec4 fragColor, in vec2 fragCoord ){\t...}We’ve given a variable vec2 uv to represent the transformed coordinates of a pixel. We’ll use it and mandel() to calculate the colour for each pixel.void mainImage( out vec4 fragColor, in vec2 fragCoord ){\tvec2 uv = fragCoord/iResolution.x;\tfloat value = mandel(uv.x, uv.y);  // mandel returns a value between 0 and 1\tvec3 col = vec3(value, value, value);\tfragColor = vec4(col, 1.);}Since we’ve put value into the R/G/B parts of col, the resulting image should be in greyscale.TransformationWe mentioned that uv are the transformed coordinates. You might recall from high school that we can transform coordinates by multiplying/dividing our vector by a number to stretch, or by adding/subtracting another vector to shift. Try doing this yourself to get the whole set in the frame!void mainImage( out vec4 fragColor, in vec2 fragCoord ){\tvec2 uv = vec2(fragCoord.x / hrztl_stretch - hrztl_shift,\t\t           fragCoord.y / vrtcl_stretch - vrtcl_shift);\t...}Working with colour - mix()We can make other colours by putting different values into the R/G/B parts of col, e.g. red = vec3(1., .5, .5) or blue = vec3(.25, .5, 1.).We can also interpolate between colours (or really anything) using the GLSL function mix(). The first two arguments are the values we want to interpolate between, and the last is the “slider value” to “slide” between the two, from 0 to 1.vec3 red = vec3(1., .5, .5);vec3 blue = vec3(.25, .5, 1.);vec3 col = mix(red, blue, mandel);ExtrasThrow sin(), cos(), and iTime into your colour calculation and we’ve got a rave going!Rotation, Time, Circles - Analogue ClockOur next example is an analogue clock. Here’s some starter code - we’ve created a uv variable for you, to give you the coordinates of the pixel from the centre of the screen. Here’s the finished shader for reference.Creating the clock faceClocks are circles. This is basic anthropology. But what is a circle?A circle is all the points within some radius $r$ of the centre of the circle $\\mathbf c$. So if we have a pixel whose coordinates are $\\mathbf p = (x, y)$, then we can check if the pixel is within the circle by checking if $\\text{length}(\\mathbf p - \\mathbf c) &lt; r$. Let’s do that in our code.Let’s set the centre of our clock to be the centre of the screen, and give it a radius of 0.4:vec2 clockCentre = vec2(0, 0);float clockRadius = 0.4;And now, let’s use the GLSL length function to implement the circle formula and colour the clock face red:if (length(uv - clockCentre) &lt; clockRadius){\tcol = vec3(1., 0.5, 0.5);}If you render now, you should see a big red circle in the middle of the screen!Initializing the seconds handThe initial position of a clock hand, at time 0 is pointing straight up, so let’s create an up vector to represent that:vec2 up = vec2(0, 0.2);Now let’s render it as a small white dot, the same way we rendered the clock face:vec2 secondsHand = up;float handRadius = 0.02;// put the following code AFTER the clock face colour codeif (length(uv - secondsHand) &lt; handRadius){\tcol = vec3(1, 1, 1);}Making it moveUsing linear algebra, we’ve created a rot() function which returns a matrix that will rotate a 2D vector clockwise by a given angle in radians (more on rotation matrices. To get a rotated vector, you multiply a rotation matrix times a vector. For example,vec2 northEast = vec2(1, 1);vec2 southEast = rot(0.5 * M_PI) * northEast;In our case, we want to rotate our clock hand by some angle based on time. GLSL gives us a handy variable iTime, which is the time in seconds since we started the shader. Let’s try it out by editing our seconds hand’s position:vec2 secondsHand = rot(iTime) * up;Getting the speed rightGreat, it’s rotating! But it’s the wrong speed. One full rotation is $2\\pi$ (aka 2. * M_PI) radians, and it takes 60 seconds, so we’ll rotate our seconds hand correspondingly:float seconds = iTime;vec2 secondsHand = rot(seconds / 60. * 2. * M_PI) * up;  // 60 seconds for a rotationNow we have a seconds hand! Let’s try a minutes hand next, using the same strategy:float minutes = seconds / 60.vec2 minutesHand = rot(minutes / 60. * 2. * M_PI) * up;  // 60 mins for a rotation...if (length(uv - minutesHand) &lt; handRadius){\tcol = vec3(1, 1, 1);}Try doing an hour hand yourself!ExtrasTo make the clock show the actual time, take a look at the GLSL iDate variable. Note that this is a 4D vector! To make it even more clock-like, see if you can use the GLSL floor() function to make the seconds hand “tick” instead of rotating smoothly.You can also make it look better by changing the lengths of the hands, so that they never overlap. Other aesthetic upgrades could be a bezel, or patterns on the clock face. Numbers are a bit more difficult, but look into textures if you have some time and wanna try it out.Using sin() and cos() creatively - Noise artThe goal of this workshop was to give you enough shaders knowledge to make cool noise art, like this:How do we do this?…Just kinda messing around tbh.Creating patterns with functionsWe know we can mix() two colours as long as we have a value between 0 and 1. And since the trigonometric functions sin() and cos() are periodic, we can use them to create patterns. We can also combine them in weird ways to get unexpected patterns.float noiseFunc(float x, float y){\treturn something;}sin() and cos() both range between -1 and 1, so we need to transform them to the range we want.float noiseFunc(float x, float y){\tfloat val = cos(...);\treturn 0.5 + 0.5 * val;  // transform cos value so that it's between 0 and 1}What do we put inside that cos() function? Anything basically. Go crazy. Just do random stuff. Better if you mix x, y, iTime, more trigonometry, etc in there. Here’s what I did for the example above:float noiseFunc(float x, float y){\tfloat val = cos(x\t\t            + sin(2. * y + cos(x + iTime))\t\t            + cos(iTime + x + cos(4. * y))\t\t            + 10. * sin(x)\t\t            );\treturn 0.5 + 0.5 * val;  // transform cos value so that it's between 0 and 1}Feel free to also use the functions we provided earlier such as mandel() and rot(), to mix more colours, to use if/else to render different things for different parts of the screen, etc. Go crazy.When you’re done, submit your shader to the competition here: TODOThanks!If you enjoyed this workshop, make sure you follow us on social media, join our mailing list, and join our Discord to keep up with our other events! You can find all of it on our website utcg.club.",
            "content_html": "<style>\t.red > code {\t\tcolor: #FF8080;\t}\t.blue > code {\t\tcolor: #4080FF;\t}</style><h1 id=\"utcg-shaders-workshop\">UTCG Shaders Workshop</h1><h2 id=\"intro\">Intro</h2><h3 id=\"what-is-a-shader\">What is a shader?</h3><p>A <em>pixel shader</em> (aka <em>fragment shader</em>) is code that runs for each pixel being rendered. There are other types of shaders (e.g. vertex shaders, geometry shaders, etc) but we won’t cover them today. Generally, they’re code that runs on the GPU, usually for rendering graphics. In games, they’re usually used for lighting effects (they are called shaders) and other fancy effects at the end of the rendering pipeline. GPUs are great for shaders, because they’re made for doing similar work for lots of different inputs - in this case, they’ll run the same shader code for each pixel on the screen.</p><h3 id=\"coding-shaders\">Coding shaders</h3><p>Shaders are usually written in <em>GLSL</em>, which is <em>OpenGL Shading Language</em>. It’s kind of like C/C++. This is the language that Minecraft shaders use!</p><p>One important thing to note is that it does not automatically convert between integers and floats. So it will throw an error if you do something like <code class=\"language-plaintext highlighter-rouge\">float x = 2;</code> or <code class=\"language-plaintext highlighter-rouge\">float y = M_PI / 2</code>. To deal with this, always put a <code class=\"language-plaintext highlighter-rouge\">.</code> after an integer, e.g. <code class=\"language-plaintext highlighter-rouge\">float x = 2.</code> and <code class=\"language-plaintext highlighter-rouge\">float y = M_PI / 2.</code>.</p><h2 id=\"fragment-shader-basics-trnasformations-colour---mandelbrot-set\">Fragment shader basics, Trnasformations, Colour - Mandelbrot Set</h2><p>To learn the basics, let’s start by rendering the <a href=\"https://en.wikipedia.org/wiki/Mandelbrot_set\">Mandelbrot set</a>. Here’s some <a href=\"https://www.shadertoy.com/view/NdsyDX\">starter code</a> - we won’t be paying much attention to the math, so the <code class=\"language-plaintext highlighter-rouge\">mandel()</code> function is provided (and you don’t need to understand it).</p><p><img src=\"https://upload.wikimedia.org/wikipedia/commons/2/21/Mandel_zoom_00_mandelbrot_set.jpg\" alt=\"Mandelbrot Set by Wolfgang Beyer from Wikipedia\" /></p><p>TODO: ^replace that with iframe of actual shader later</p><h3 id=\"what-does-our-shader-need-to-do\">What does our shader need to do?</h3><p>Our fragment shader’s input is a pixel on the screen and its output is its colour, as a 4D RGBA (Red/Green/Blue/Alpha) vector.</p><div class=\"language-glsl highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">void</span> <span class=\"nf\">mainImage</span><span class=\"p\">(</span> <span class=\"k\">out</span> <span class=\"kt\">vec4</span> <span class=\"n\">fragColor</span><span class=\"p\">,</span> <span class=\"k\">in</span> <span class=\"kt\">vec2</span> <span class=\"n\">fragCoord</span> <span class=\"p\">)</span><span class=\"p\">{</span>\t<span class=\"p\">...</span><span class=\"p\">}</span></code></pre></div></div><p>We’ve given a variable <code class=\"language-plaintext highlighter-rouge\">vec2 uv</code> to represent the transformed coordinates of a pixel. We’ll use it and <code class=\"language-plaintext highlighter-rouge\">mandel()</code> to calculate the colour for each pixel.</p><div class=\"language-glsl highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">void</span> <span class=\"nf\">mainImage</span><span class=\"p\">(</span> <span class=\"k\">out</span> <span class=\"kt\">vec4</span> <span class=\"n\">fragColor</span><span class=\"p\">,</span> <span class=\"k\">in</span> <span class=\"kt\">vec2</span> <span class=\"n\">fragCoord</span> <span class=\"p\">)</span><span class=\"p\">{</span>\t<span class=\"kt\">vec2</span> <span class=\"n\">uv</span> <span class=\"o\">=</span> <span class=\"n\">fragCoord</span><span class=\"o\">/</span><span class=\"n\">iResolution</span><span class=\"p\">.</span><span class=\"n\">x</span><span class=\"p\">;</span>\t<span class=\"kt\">float</span> <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">mandel</span><span class=\"p\">(</span><span class=\"n\">uv</span><span class=\"p\">.</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">uv</span><span class=\"p\">.</span><span class=\"n\">y</span><span class=\"p\">);</span>  <span class=\"c1\">// mandel returns a value between 0 and 1</span>\t<span class=\"kt\">vec3</span> <span class=\"n\">col</span> <span class=\"o\">=</span> <span class=\"kt\">vec3</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">);</span>\t<span class=\"n\">fragColor</span> <span class=\"o\">=</span> <span class=\"kt\">vec4</span><span class=\"p\">(</span><span class=\"n\">col</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">.);</span><span class=\"p\">}</span></code></pre></div></div><p>Since we’ve put <code class=\"language-plaintext highlighter-rouge\">value</code> into the R/G/B parts of <code class=\"language-plaintext highlighter-rouge\">col</code>, the resulting image should be in greyscale.</p><h3 id=\"transformation\">Transformation</h3><p>We mentioned that <code class=\"language-plaintext highlighter-rouge\">uv</code> are the transformed coordinates. You might recall from high school that we can transform coordinates by multiplying/dividing our vector by a number to stretch, or by adding/subtracting another vector to shift. Try doing this yourself to get the whole set in the frame!</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>void mainImage( out vec4 fragColor, in vec2 fragCoord ){\tvec2 uv = vec2(fragCoord.x / hrztl_stretch - hrztl_shift,\t\t           fragCoord.y / vrtcl_stretch - vrtcl_shift);\t...}</code></pre></div></div><h3 id=\"working-with-colour---mix\">Working with colour - <code class=\"language-plaintext highlighter-rouge\">mix()</code></h3><p>We can make other colours by putting different values into the R/G/B parts of <code class=\"language-plaintext highlighter-rouge\">col</code>, e.g. <span class=\"red\"><code class=\"language-plaintext highlighter-rouge\">red = vec3(1., .5, .5)</code></span> or <span class=\"blue\"><code class=\"language-plaintext highlighter-rouge\">blue = vec3(.25, .5, 1.)</code></span>.</p><p>We can also interpolate between colours (or really anything) using the GLSL function <code class=\"language-plaintext highlighter-rouge\">mix()</code>. The first two arguments are the values we want to interpolate between, and the last is the “slider value” to “slide” between the two, from <code class=\"language-plaintext highlighter-rouge\">0</code> to <code class=\"language-plaintext highlighter-rouge\">1</code>.</p><div class=\"language-glsl highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">vec3</span> <span class=\"n\">red</span> <span class=\"o\">=</span> <span class=\"kt\">vec3</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">.,</span> <span class=\"p\">.</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"p\">.</span><span class=\"mi\">5</span><span class=\"p\">);</span><span class=\"kt\">vec3</span> <span class=\"n\">blue</span> <span class=\"o\">=</span> <span class=\"kt\">vec3</span><span class=\"p\">(.</span><span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"p\">.</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">.);</span><span class=\"kt\">vec3</span> <span class=\"n\">col</span> <span class=\"o\">=</span> <span class=\"n\">mix</span><span class=\"p\">(</span><span class=\"n\">red</span><span class=\"p\">,</span> <span class=\"n\">blue</span><span class=\"p\">,</span> <span class=\"n\">mandel</span><span class=\"p\">);</span></code></pre></div></div><h3 id=\"extras\">Extras</h3><p>Throw <code class=\"language-plaintext highlighter-rouge\">sin()</code>, <code class=\"language-plaintext highlighter-rouge\">cos()</code>, and <code class=\"language-plaintext highlighter-rouge\">iTime</code> into your colour calculation and we’ve got a rave going!</p><h2 id=\"rotation-time-circles---analogue-clock\">Rotation, Time, Circles - Analogue Clock</h2><p>Our next example is an analogue clock. Here’s some <a href=\"https://www.shadertoy.com/view/fdlyz2\">starter code</a> - we’ve created a <code class=\"language-plaintext highlighter-rouge\">uv</code> variable for you, to give you the coordinates of the pixel from the centre of the screen. Here’s the <a href=\"https://www.shadertoy.com/view/fslcR2\">finished shader</a> for reference.</p><iframe width=\"640\" height=\"360\" frameborder=\"0\" src=\"https://www.shadertoy.com/embed/fslcR2?gui=true&amp;t=10&amp;paused=true&amp;muted=false\" allowfullscreen=\"\"></iframe><h3 id=\"creating-the-clock-face\">Creating the clock face</h3><p>Clocks are circles. This is basic anthropology. But what is a circle?</p><p>A circle is all the points within some radius $r$ of the centre of the circle $\\mathbf c$. So if we have a pixel whose coordinates are $\\mathbf p = (x, y)$, then we can check if the pixel is within the circle by checking if $\\text{length}(\\mathbf p - \\mathbf c) &lt; r$. Let’s do that in our code.</p><p>Let’s set the centre of our clock to be the centre of the screen, and give it a radius of 0.4:</p><div class=\"language-glsl highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">vec2</span> <span class=\"n\">clockCentre</span> <span class=\"o\">=</span> <span class=\"kt\">vec2</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"kt\">float</span> <span class=\"n\">clockRadius</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">.</span><span class=\"mi\">4</span><span class=\"p\">;</span></code></pre></div></div><p>And now, let’s use the GLSL <code class=\"language-plaintext highlighter-rouge\">length</code> function to implement the circle formula and colour the clock face red:</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>if (length(uv - clockCentre) &lt; clockRadius){\tcol = vec3(1., 0.5, 0.5);}</code></pre></div></div><p>If you render now, you should see a big red circle in the middle of the screen!</p><h3 id=\"initializing-the-seconds-hand\">Initializing the seconds hand</h3><p>The initial position of a clock hand, at time 0 is pointing straight up, so let’s create an <code class=\"language-plaintext highlighter-rouge\">up</code> vector to represent that:</p><div class=\"language-glsl highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">vec2</span> <span class=\"n\">up</span> <span class=\"o\">=</span> <span class=\"kt\">vec2</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">.</span><span class=\"mi\">2</span><span class=\"p\">);</span></code></pre></div></div><p>Now let’s render it as a small white dot, the same way we rendered the clock face:</p><div class=\"language-glsl highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">vec2</span> <span class=\"n\">secondsHand</span> <span class=\"o\">=</span> <span class=\"n\">up</span><span class=\"p\">;</span><span class=\"kt\">float</span> <span class=\"n\">handRadius</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">.</span><span class=\"mo\">02</span><span class=\"p\">;</span><span class=\"c1\">// put the following code AFTER the clock face colour code</span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">uv</span> <span class=\"o\">-</span> <span class=\"n\">secondsHand</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"n\">handRadius</span><span class=\"p\">)</span><span class=\"p\">{</span>\t<span class=\"n\">col</span> <span class=\"o\">=</span> <span class=\"kt\">vec3</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"p\">}</span></code></pre></div></div><h3 id=\"making-it-move\">Making it move</h3><p>Using linear algebra, we’ve created a <code class=\"language-plaintext highlighter-rouge\">rot()</code> function which returns a matrix that will rotate a 2D vector clockwise by a given angle in radians (<a href=\"https://en.wikipedia.org/wiki/Rotation_matrix\">more on rotation matrices</a>. To get a rotated vector, you multiply a rotation matrix times a vector. For example,</p><div class=\"language-glsl highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">vec2</span> <span class=\"n\">northEast</span> <span class=\"o\">=</span> <span class=\"kt\">vec2</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"kt\">vec2</span> <span class=\"n\">southEast</span> <span class=\"o\">=</span> <span class=\"n\">rot</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">.</span><span class=\"mi\">5</span> <span class=\"o\">*</span> <span class=\"n\">M_PI</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">northEast</span><span class=\"p\">;</span></code></pre></div></div><p>In our case, we want to rotate our clock hand by some angle based on time. GLSL gives us a handy variable <code class=\"language-plaintext highlighter-rouge\">iTime</code>, which is the time in seconds since we started the shader. Let’s try it out by editing our seconds hand’s position:</p><div class=\"language-glsl highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">vec2</span> <span class=\"n\">secondsHand</span> <span class=\"o\">=</span> <span class=\"n\">rot</span><span class=\"p\">(</span><span class=\"n\">iTime</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">up</span><span class=\"p\">;</span></code></pre></div></div><h3 id=\"getting-the-speed-right\">Getting the speed right</h3><p>Great, it’s rotating! But it’s the wrong speed. One full rotation is $2\\pi$ (aka <code class=\"language-plaintext highlighter-rouge\">2. * M_PI</code>) radians, and it takes 60 seconds, so we’ll rotate our seconds hand correspondingly:</p><div class=\"language-glsl highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">float</span> <span class=\"n\">seconds</span> <span class=\"o\">=</span> <span class=\"n\">iTime</span><span class=\"p\">;</span><span class=\"kt\">vec2</span> <span class=\"n\">secondsHand</span> <span class=\"o\">=</span> <span class=\"n\">rot</span><span class=\"p\">(</span><span class=\"n\">seconds</span> <span class=\"o\">/</span> <span class=\"mi\">60</span><span class=\"p\">.</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">.</span> <span class=\"o\">*</span> <span class=\"n\">M_PI</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">up</span><span class=\"p\">;</span>  <span class=\"c1\">// 60 seconds for a rotation</span></code></pre></div></div><p>Now we have a seconds hand! Let’s try a minutes hand next, using the same strategy:</p><div class=\"language-glsl highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">float</span> <span class=\"n\">minutes</span> <span class=\"o\">=</span> <span class=\"n\">seconds</span> <span class=\"o\">/</span> <span class=\"mi\">60</span><span class=\"p\">.</span><span class=\"kt\">vec2</span> <span class=\"n\">minutesHand</span> <span class=\"o\">=</span> <span class=\"n\">rot</span><span class=\"p\">(</span><span class=\"n\">minutes</span> <span class=\"o\">/</span> <span class=\"mi\">60</span><span class=\"p\">.</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">.</span> <span class=\"o\">*</span> <span class=\"n\">M_PI</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">up</span><span class=\"p\">;</span>  <span class=\"c1\">// 60 mins for a rotation</span><span class=\"p\">...</span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">uv</span> <span class=\"o\">-</span> <span class=\"n\">minutesHand</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"n\">handRadius</span><span class=\"p\">)</span><span class=\"p\">{</span>\t<span class=\"n\">col</span> <span class=\"o\">=</span> <span class=\"kt\">vec3</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"p\">}</span></code></pre></div></div><p>Try doing an hour hand yourself!</p><h3 id=\"extras-1\">Extras</h3><p>To make the clock show the actual time, take a look at the GLSL <code class=\"language-plaintext highlighter-rouge\">iDate</code> variable. Note that this is a 4D vector! To make it even more clock-like, see if you can use the GLSL <code class=\"language-plaintext highlighter-rouge\">floor()</code> function to make the seconds hand “tick” instead of rotating smoothly.</p><p>You can also make it look better by changing the lengths of the hands, so that they never overlap. Other aesthetic upgrades could be a bezel, or patterns on the clock face. Numbers are a bit more difficult, but look into textures if you have some time and wanna try it out.</p><h2 id=\"using-sin-and-cos-creatively---noise-art\">Using <code class=\"language-plaintext highlighter-rouge\">sin()</code> and <code class=\"language-plaintext highlighter-rouge\">cos()</code> creatively - Noise art</h2><p>The goal of this workshop was to give you enough shaders knowledge to make cool noise art, like this:</p><iframe width=\"640\" height=\"360\" frameborder=\"0\" src=\"https://www.shadertoy.com/embed/ssScDw?gui=true&amp;t=10&amp;paused=true&amp;muted=false\" allowfullscreen=\"\"></iframe><p>How do we do this?</p><p>…</p><p>Just kinda messing around tbh.</p><h3 id=\"creating-patterns-with-functions\">Creating patterns with functions</h3><p>We know we can <code class=\"language-plaintext highlighter-rouge\">mix()</code> two colours as long as we have a value between <code class=\"language-plaintext highlighter-rouge\">0</code> and <code class=\"language-plaintext highlighter-rouge\">1</code>. And since the trigonometric functions <code class=\"language-plaintext highlighter-rouge\">sin()</code> and <code class=\"language-plaintext highlighter-rouge\">cos()</code> are periodic, we can use them to create patterns. We can also combine them in weird ways to get unexpected patterns.</p><div class=\"language-glsl highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">float</span> <span class=\"nf\">noiseFunc</span><span class=\"p\">(</span><span class=\"kt\">float</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"kt\">float</span> <span class=\"n\">y</span><span class=\"p\">)</span><span class=\"p\">{</span>\t<span class=\"k\">return</span> <span class=\"n\">something</span><span class=\"p\">;</span><span class=\"p\">}</span></code></pre></div></div><p><img src=\"https://upload.wikimedia.org/wikipedia/commons/7/71/Sine_cosine_one_period.svg\" alt=\"Sine and Cosine graph by Geek3 from Wikipedia\" /></p><p><code class=\"language-plaintext highlighter-rouge\">sin()</code> and <code class=\"language-plaintext highlighter-rouge\">cos()</code> both range between <code class=\"language-plaintext highlighter-rouge\">-1</code> and <code class=\"language-plaintext highlighter-rouge\">1</code>, so we need to transform them to the range we want.</p><div class=\"language-glsl highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">float</span> <span class=\"nf\">noiseFunc</span><span class=\"p\">(</span><span class=\"kt\">float</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"kt\">float</span> <span class=\"n\">y</span><span class=\"p\">)</span><span class=\"p\">{</span>\t<span class=\"kt\">float</span> <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">cos</span><span class=\"p\">(...);</span>\t<span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">.</span><span class=\"mi\">5</span> <span class=\"o\">+</span> <span class=\"mi\">0</span><span class=\"p\">.</span><span class=\"mi\">5</span> <span class=\"o\">*</span> <span class=\"n\">val</span><span class=\"p\">;</span>  <span class=\"c1\">// transform cos value so that it's between 0 and 1</span><span class=\"p\">}</span></code></pre></div></div><p>What do we put inside that <code class=\"language-plaintext highlighter-rouge\">cos()</code> function? Anything basically. Go crazy. Just do random stuff. Better if you mix <code class=\"language-plaintext highlighter-rouge\">x</code>, <code class=\"language-plaintext highlighter-rouge\">y</code>, <code class=\"language-plaintext highlighter-rouge\">iTime</code>, more trigonometry, etc in there. Here’s what I did for the example above:</p><div class=\"language-glsl highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">float</span> <span class=\"nf\">noiseFunc</span><span class=\"p\">(</span><span class=\"kt\">float</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"kt\">float</span> <span class=\"n\">y</span><span class=\"p\">)</span><span class=\"p\">{</span>\t<span class=\"kt\">float</span> <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"n\">x</span>\t\t            <span class=\"o\">+</span> <span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">.</span> <span class=\"o\">*</span> <span class=\"n\">y</span> <span class=\"o\">+</span> <span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">iTime</span><span class=\"p\">))</span>\t\t            <span class=\"o\">+</span> <span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"n\">iTime</span> <span class=\"o\">+</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">.</span> <span class=\"o\">*</span> <span class=\"n\">y</span><span class=\"p\">))</span>\t\t            <span class=\"o\">+</span> <span class=\"mi\">10</span><span class=\"p\">.</span> <span class=\"o\">*</span> <span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\t\t            <span class=\"p\">);</span>\t<span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">.</span><span class=\"mi\">5</span> <span class=\"o\">+</span> <span class=\"mi\">0</span><span class=\"p\">.</span><span class=\"mi\">5</span> <span class=\"o\">*</span> <span class=\"n\">val</span><span class=\"p\">;</span>  <span class=\"c1\">// transform cos value so that it's between 0 and 1</span><span class=\"p\">}</span></code></pre></div></div><p>Feel free to also use the functions we provided earlier such as <code class=\"language-plaintext highlighter-rouge\">mandel()</code> and <code class=\"language-plaintext highlighter-rouge\">rot()</code>, to mix more colours, to use if/else to render different things for different parts of the screen, etc. Go crazy.</p><p>When you’re done, submit your shader to the competition here: TODO</p><h2 id=\"thanks\">Thanks!</h2><p>If you enjoyed this workshop, make sure you follow us on social media, join our mailing list, and join our Discord to keep up with our other events! You can find all of it on our website <a href=\"https://utcg.club/\">utcg.club</a>.</p>",
            "url": "https://utcg.github.io/workshops/2022/02/10/shaders",
            
            
            
            
            
            "date_published": "2022-02-10T00:00:00+01:00",
            "date_modified": "2022-02-10T00:00:00+01:00",
            
                "author":  {
                "name": "UofT Computer Graphics Club",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://utcg.github.io/workshops/2021/11/01/blender-part2",
            "title": "Blender Workshop Part 2 Recording",
            "summary": "Part 2 Materials and Lighting!",
            "content_text": "UTCG Blender Violin Workshop Part 2Here’s the recording for Part 2 of UTCG’s Blender Workshop on October 29, 2021.If the video doesn’t work you can download it.You can also download the Blender file that we started with in the workshop!(You also might want this violin reference image, put it in the same folder as the .blend file)Here’s a finished render.",
            "content_html": "<h1 id=\"utcg-blender-violin-workshop-part-2\">UTCG Blender Violin Workshop Part 2</h1><p>Here’s the recording for Part 2 of UTCG’s Blender Workshop on October 29, 2021.</p><p>If the video doesn’t work you can <a href=\"https://github.com/UTCG/workshops/releases/download/v.1.0.2/Blender2.mp4\">download it</a>.</p><video style=\"max-width:100%\" controls=\"\" src=\"https://github.com/UTCG/workshops/releases/download/v.1.0.2/Blender2.mp4\"></video><p>You can also download the <a href=\"https://github.com/UTCG/workshops/releases/download/v.1.0.2/Workshop2Start.blend\">Blender file</a> that we started with in the workshop!(You also might want this <a href=\"https://upload.wikimedia.org/wikipedia/commons/1/1b/Violin_VL100.png\">violin reference image</a>, put it in the same folder as the .blend file)</p><p>Here’s a finished render.</p><p><img src=\"https://github.com/UTCG/workshops/releases/download/v.1.0.2/RenderTest.png\" width=\"400px\" /></p>",
            "url": "https://utcg.github.io/workshops/2021/11/01/blender-part2",
            
            
            
            
            
            "date_published": "2021-11-01T00:00:00+01:00",
            "date_modified": "2021-11-01T00:00:00+01:00",
            
                "author":  {
                "name": "UofT Computer Graphics Club",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://utcg.github.io/workshops/2021/10/24/blender-recording",
            "title": "Blender Workshop Recording",
            "summary": "Part 1 Modelling a violin!",
            "content_text": "UTCG Blender Violin WorkshopHere’s the recording for Part 1 of UTCG’s Blender Workshop on October 22, 2021.If the video doesn’t work you can download it.You can also download the Blender file that was used in the workshop!(You also might want this violin reference image, put it in the same folder as the .blend file)",
            "content_html": "<h1 id=\"utcg-blender-violin-workshop\">UTCG Blender Violin Workshop</h1><p>Here’s the recording for Part 1 of UTCG’s Blender Workshop on October 22, 2021.</p><p>If the video doesn’t work you can <a href=\"https://github.com/UTCG/workshops/releases/download/v1.0.1/Blender.mp4\">download it</a>.</p><video style=\"max-width:100%\" controls=\"\" src=\"https://github.com/UTCG/workshops/releases/download/v1.0.1/Blender.mp4\"></video><p>You can also download the <a href=\"https://github.com/UTCG/workshops/releases/download/v1.0.1/Workshop1.blend\">Blender file</a> that was used in the workshop!(You also might want this <a href=\"https://upload.wikimedia.org/wikipedia/commons/1/1b/Violin_VL100.png\">violin reference image</a>, put it in the same folder as the .blend file)</p>",
            "url": "https://utcg.github.io/workshops/2021/10/24/blender-recording",
            
            
            
            
            
            "date_published": "2021-10-24T00:00:00+02:00",
            "date_modified": "2021-10-24T00:00:00+02:00",
            
                "author":  {
                "name": "UofT Computer Graphics Club",
                "url": null,
                "avatar": null
                }
                
            
        }
    
    ]
}