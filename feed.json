{
    "version": "https://jsonfeed.org/version/1",
    "title": "UTCG Workshops",
    "home_page_url": "https://utcg.github.io/workshops/",
    "feed_url": "https://utcg.github.io/workshops/feed.json",
    "description": "UTCG workshops!",
    "icon": "https://utcg.github.io/workshops/apple-touch-icon.png",
    "favicon": "https://utcg.github.io/workshops/favicon.ico",
    "expired": false,
    
    "author":  {
        "name": "UofT Computer Graphics Club",
        "url": null,
        "avatar": null
    },
    
"items": [
    
        {
            "id": "https://utcg.github.io/workshops/2022/04/07/globe",
            "title": "Globe",
            "summary": null,
            "content_text": "UDesign x UTCG WorkshopHere’s the git repo for this part of the workshop. Please clone/download it, so that you can use the starter code! https://github.com/UTCG/udesign-globeThe finished scene will look something like this.Running the siteIn order to avoid the notorious CORS errors, we need to serve our website from a web server instead of just opening the HTML page in a browser from our file system. Luckily, this is easy!If you already have Python installed, you can simply go to the directory that stores your index.html and run the command python3 -m http.server (or python -m SimpleHTTPServer if you’re using Python 2). Then your website will be live at http://localhost:8000/index.html.If you have VS Code installed, you can also use the ritwickdey.LiveServer extension.Here’s some more info on running a local web server.You should see an empty page with a gradient background that has no console errors.While working on this page, remember to save your code and refresh every time you want to see your changes!Setting up a sceneEvery scene made with three.js has a few basic objects.  the Scene THREE.Scene          This is a representation of all the 3D objects within our scene.        our object Group          We’ll put our main objects in this group, so that we can access them outside of our init function and update their properties later, i.e. if we want to move them around.        the Renderer          This is responsible for taking our 3D scene and camera and outputting an image to the screen        the Camera          This is our view into the scene      We’ll initialize it using OrbitControls so that we revolve around our scene      We’ll define global variables for these objects for convenience, and initialize them inside our init() function based on our screen size.// necessary global objectsvar scene;var renderer;var camera;// objects in the scene that we want to access outside of initvar group;...function init() {    // basic scene objects    scene = new THREE.Scene();    renderer = new THREE.WebGLRenderer({alpha: true});    let div = document.getElementById('globediv');    let w = 700;    let h = 600;    renderer.setSize(w, h);    renderer.setPixelRatio(window.devicePixelRatio);    div.appendChild(renderer.domElement);    // set up camera    camera = new THREE.PerspectiveCamera(75, w / h, 0.1, 1000);    const controls = new OrbitControls(camera, renderer.domElement);    camera.position.z = 3;    scene.add(camera)    // group of all of the objects we want to render in our scene    group = new THREE.Group();    scene.add(group);    ...}In particular, notice that we add objects to our scene using scene.add(object). We’ll similarly add objects to our group with group.add(object), and we can even add objects to other object. More on this later!Setting up animationAn animation happens when we render a different image at every frame. In JavaScript, to get a smooth animation, we must repeatedly call the requestAnimationFrame function to ask it to render again as soon as possible. So our animate function will look like this:function animate() {    // request for animate() to be called again next frame    requestAnimationFrame(animate);    renderer.render(scene, camera);}Now we can get our scene up and running:init();animate();Adding a terrible sphereLet’s try adding a really bad sphere and see what happens. That way, we’ll see our improvements when we add lighting, increase the geometry resolution, and add textures.What we need to add to our scene is a Mesh, which is an object that can be rendered. A mesh requires a geometry, aka a shape, and a material, aka how it looks.For our geometry, we’ll make a SphereGeometry. The constructor takes arguments for its radius, the number of segments it uses along its width, and the number of segments it uses along its height. Let’s give it a raidus of 1 for simplicity, and 5 segments in each direction, so that it looks chunky for now.For our material, we’ll make a simple MeshStandardMaterial. We’ll add some more fancy features to it later.Now we can make our “sphere” mesh and add it to our scene:const geometry = new THREE.SphereGeometry(1, 5, 5);const material = new THREE.MeshStandardMaterial();const sphere = new THREE.Mesh(geometry, material);group.add(sphere);Now you should see a weird chunky dark thing on your screen. Why is it pitch black? Because we don’t have any lighting yet! Let’s add that next.Adding some lightingThe most basic type of lighting we can add is ambient lighting, which adds a little bit of light to everything in the scene equally. This mimics how a little bit of light bounces around everywhere when we’re not in a pitch-black room, though there is no such thing as ambient lighting in real life. To add ambient lighting, all we need to do is choose its colour and add it to the scene. (Feel free to mess around with its colour!)const ambientLight = new THREE.AmbientLight(0x404040); // soft white lightscene.add(ambientLight);Now our sphere is no longer pitch-black! Let’s make even more interesting lighting though, by adding… the sun! In real life, the sun is so far away that it feels less like a point light and more like light coming from a certain direction, so we’ll use a DirectionalLight. Feel free to position it how you want, but we’ll give you some coordinates that look okay for us. Once we position the light, we’ll make it point at our sphere by setting its target.const sun = new THREE.DirectionalLight(0xffffff, 2);  // colour and intensitysun.target = sphere;  // point at spheresun.position.set(7, 10, 7);  // move right, up, forwardscene.add(sun);Now we have a nice, thoroughly illuminated, white potato! Congrats!Returning to the sphere - materials and resolutionTo make our sphere look more sphere-y, let’s increase its geometry resolution. We can do this by changing its segment parameters from 5 up to a bigger number, so that it’s less blocky.const geometry = new THREE.SphereGeometry(1, 40, 40);  // 40 segments in each directionLet’s also make it into a globe, by giving it a texture. We got our textures from this website, we downloaded their 1K versions, but feel free to find your own. What we really need is a colour map (aka what we normally call a texture) and a bump map.We can load them onto our sphere by modifying our Material object to load a map and a bumpMap:const material = new THREE.MeshStandardMaterial({    map: new THREE.TextureLoader().load('./img/globe.jpg'),    bumpMap: new THREE.TextureLoader().load('./img/earthbump1k.jpg'),    bumpScale: 0.05,  // how bumpy our bump map will make our sphere});Now our sphere should look like the earth! If you’re curious what the bump map is doing, I recommend you remove the image texture and take a look. The purpose of the bump map is to make the sphere look bumpy, and react to the ligthing as if it has the geometry of the texture (e.g. the mountains and valleys on earth), but without us having to change the actual geometry of our mesh. So our sphere is still geometrically a sphere, but it reflects light as if it’s bumpy!Extra: making the sun follow our camera aroundNow that our Earth looks cool, we might wanna revolve around and look at every little bit of it. But some parts are pretty dark. It’s pretty frustrating trying to look at the parts where the sun don’t shine, so let’s make our sun follow our camera around. We can do this by adding the sun to the camera object instead of the scene object, so that the camera is the “parent” pulling the sun around with it like a kid at Home Depot.const sun = ...// scene.add(sun);  // fixed suncamera.add(sun);    // sun follows cameraExtra: Making the sphere rotateI think it’ll be pretty cool if the Earth was slowly rotating, so let’s add that in. All we need to do is update our animate() function to rotate our object group:function animate() {    ...    group.rotation.y += 0.0025;}We increment the y-axis rotation because this will make it revolve around the vertical axis. You can imagine a skewer sticking through the Earth vertically, and spinning it around on that axis.Adding simple markers for placesLet’s add markers to our globe to point out some important places. Why are these places important? You’ll see at 4:36 AM GMT on July 26th 2025!We’ve made the addMarker() function to do most of this for you, though we left out the actual marker. For simplicity, let’s make it a sphere. But since it’ll be intersecting the surface of the Earth, it’ll look like a half-sphere, which looks kinda cool.let mesh = new THREE.Mesh(    new THREE.SphereGeometry(0.015, 20, 20),  // tiny and round    new THREE.MeshStandardMaterial({ color: markerColor }));Now we can add our markers by simply specifying their names, locations, and colours.// add markers to cool citiesaddMarker('Ottawa', 45.4215, -75.6972, 0xff0000, font, group);addMarker('Nairobi', -1.286389, 36.817223, 0x0000ff, font, group);addMarker('Rio de Janeiro', -22.908333, -43.196388, 0x00ff00, font, group);We chose some wacky colours here, but try changing them all to black for a sleeker look.FinThat’s our basic globe widget! It was inspired particularly by the one on the GitHub homepage, though we didn’t go through the same process since that’s kinda insane. Though you can definitely get results that look pretty good using better choice in textures, messing with lighting, and maybe adding your own shaders.Thanks for following along!",
            "content_html": "<h1 id=\"udesign-x-utcg-workshop\">UDesign x UTCG Workshop</h1><p>Here’s the git repo for this part of the workshop. Please clone/download it, so that you can use the starter code! <a href=\"https://github.com/UTCG/udesign-globe\">https://github.com/UTCG/udesign-globe</a></p><p>The finished scene will look something like <a href=\"https://utcg.github.io/udesign-globe/final\">this</a>.</p><h2 id=\"running-the-site\">Running the site</h2><p>In order to avoid the notorious <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS/Errors\">CORS errors</a>, we need to serve our website from a web server instead of just opening the HTML page in a browser from our file system. Luckily, this is easy!</p><p>If you already have Python installed, you can simply go to the directory that stores your <code class=\"language-plaintext highlighter-rouge\">index.html</code> and run the command <code class=\"language-plaintext highlighter-rouge\">python3 -m http.server</code> (or <code class=\"language-plaintext highlighter-rouge\">python -m SimpleHTTPServer</code> if you’re using Python 2). Then your website will be live at <a href=\"http://localhost:8000/index.html\"><code class=\"language-plaintext highlighter-rouge\">http://localhost:8000/index.html</code></a>.</p><p>If you have <a href=\"\">VS Code</a> installed, you can also use the <code class=\"language-plaintext highlighter-rouge\">ritwickdey.LiveServer</code> extension.</p><p><a href=\"https://developer.mozilla.org/en-US/docs/Learn/Common_questions/set_up_a_local_testing_server\">Here’s</a> some more info on running a local web server.</p><p>You should see an empty page with a gradient background that has no console errors.</p><p>While working on this page, remember to save your code and refresh every time you want to see your changes!</p><h2 id=\"setting-up-a-scene\">Setting up a scene</h2><p>Every scene made with three.js has a few basic objects.</p><ul>  <li>the Scene <a href=\"https://threejs.org/docs/?q=scene#api/en/scenes/Scene\">THREE.Scene</a>    <ul>      <li>This is a representation of all the 3D objects within our scene.</li>    </ul>  </li>  <li>our object <a href=\"https://threejs.org/docs/?q=group#api/en/objects/Group\">Group</a>    <ul>      <li>We’ll put our main objects in this group, so that we can access them outside of our init function and update their properties later, i.e. if we want to move them around.</li>    </ul>  </li>  <li>the <a href=\"https://threejs.org/docs/?q=renderer#api/en/renderers/WebGLRenderer\">Renderer</a>    <ul>      <li>This is responsible for taking our 3D scene and camera and outputting an image to the screen</li>    </ul>  </li>  <li>the <a href=\"https://threejs.org/docs/?q=camera#api/en/cameras/PerspectiveCamera\">Camera</a>    <ul>      <li>This is our view into the scene</li>      <li>We’ll initialize it using <a href=\"https://threejs.org/docs/?q=orbitcontr#examples/en/controls/OrbitControls\">OrbitControls</a> so that we revolve around our scene</li>    </ul>  </li></ul><p>We’ll define global variables for these objects for convenience, and initialize them inside our <code class=\"language-plaintext highlighter-rouge\">init()</code> function based on our screen size.</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// necessary global objects</span><span class=\"kd\">var</span> <span class=\"nx\">scene</span><span class=\"p\">;</span><span class=\"kd\">var</span> <span class=\"nx\">renderer</span><span class=\"p\">;</span><span class=\"kd\">var</span> <span class=\"nx\">camera</span><span class=\"p\">;</span><span class=\"c1\">// objects in the scene that we want to access outside of init</span><span class=\"kd\">var</span> <span class=\"nx\">group</span><span class=\"p\">;</span><span class=\"p\">...</span><span class=\"kd\">function</span> <span class=\"nx\">init</span><span class=\"p\">()</span> <span class=\"p\">{</span>    <span class=\"c1\">// basic scene objects</span>    <span class=\"nx\">scene</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">THREE</span><span class=\"p\">.</span><span class=\"nx\">Scene</span><span class=\"p\">();</span>    <span class=\"nx\">renderer</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">THREE</span><span class=\"p\">.</span><span class=\"nx\">WebGLRenderer</span><span class=\"p\">({</span><span class=\"na\">alpha</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">});</span>    <span class=\"kd\">let</span> <span class=\"nx\">div</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">globediv</span><span class=\"dl\">'</span><span class=\"p\">);</span>    <span class=\"kd\">let</span> <span class=\"nx\">w</span> <span class=\"o\">=</span> <span class=\"mi\">700</span><span class=\"p\">;</span>    <span class=\"kd\">let</span> <span class=\"nx\">h</span> <span class=\"o\">=</span> <span class=\"mi\">600</span><span class=\"p\">;</span>    <span class=\"nx\">renderer</span><span class=\"p\">.</span><span class=\"nx\">setSize</span><span class=\"p\">(</span><span class=\"nx\">w</span><span class=\"p\">,</span> <span class=\"nx\">h</span><span class=\"p\">);</span>    <span class=\"nx\">renderer</span><span class=\"p\">.</span><span class=\"nx\">setPixelRatio</span><span class=\"p\">(</span><span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">devicePixelRatio</span><span class=\"p\">);</span>    <span class=\"nx\">div</span><span class=\"p\">.</span><span class=\"nx\">appendChild</span><span class=\"p\">(</span><span class=\"nx\">renderer</span><span class=\"p\">.</span><span class=\"nx\">domElement</span><span class=\"p\">);</span>    <span class=\"c1\">// set up camera</span>    <span class=\"nx\">camera</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">THREE</span><span class=\"p\">.</span><span class=\"nx\">PerspectiveCamera</span><span class=\"p\">(</span><span class=\"mi\">75</span><span class=\"p\">,</span> <span class=\"nx\">w</span> <span class=\"o\">/</span> <span class=\"nx\">h</span><span class=\"p\">,</span> <span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">);</span>    <span class=\"kd\">const</span> <span class=\"nx\">controls</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">OrbitControls</span><span class=\"p\">(</span><span class=\"nx\">camera</span><span class=\"p\">,</span> <span class=\"nx\">renderer</span><span class=\"p\">.</span><span class=\"nx\">domElement</span><span class=\"p\">);</span>    <span class=\"nx\">camera</span><span class=\"p\">.</span><span class=\"nx\">position</span><span class=\"p\">.</span><span class=\"nx\">z</span> <span class=\"o\">=</span> <span class=\"mi\">3</span><span class=\"p\">;</span>    <span class=\"nx\">scene</span><span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"nx\">camera</span><span class=\"p\">)</span>    <span class=\"c1\">// group of all of the objects we want to render in our scene</span>    <span class=\"nx\">group</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">THREE</span><span class=\"p\">.</span><span class=\"nx\">Group</span><span class=\"p\">();</span>    <span class=\"nx\">scene</span><span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"nx\">group</span><span class=\"p\">);</span>    <span class=\"p\">...</span><span class=\"p\">}</span></code></pre></div></div><p>In particular, notice that we add objects to our scene using <code class=\"language-plaintext highlighter-rouge\">scene.add(object)</code>. We’ll similarly add objects to our group with <code class=\"language-plaintext highlighter-rouge\">group.add(object)</code>, and we can even add objects to other object. More on this later!</p><h2 id=\"setting-up-animation\">Setting up animation</h2><p>An animation happens when we render a different image at every frame. In JavaScript, to get a smooth animation, we must repeatedly call the <code class=\"language-plaintext highlighter-rouge\">requestAnimationFrame</code> function to ask it to render again as soon as possible. So our animate function will look like this:</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nx\">animate</span><span class=\"p\">()</span> <span class=\"p\">{</span>    <span class=\"c1\">// request for animate() to be called again next frame</span>    <span class=\"nx\">requestAnimationFrame</span><span class=\"p\">(</span><span class=\"nx\">animate</span><span class=\"p\">);</span>    <span class=\"nx\">renderer</span><span class=\"p\">.</span><span class=\"nx\">render</span><span class=\"p\">(</span><span class=\"nx\">scene</span><span class=\"p\">,</span> <span class=\"nx\">camera</span><span class=\"p\">);</span><span class=\"p\">}</span></code></pre></div></div><p>Now we can get our scene up and running:</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">init</span><span class=\"p\">();</span><span class=\"nx\">animate</span><span class=\"p\">();</span></code></pre></div></div><h2 id=\"adding-a-terrible-sphere\">Adding a terrible sphere</h2><p>Let’s try adding a really bad sphere and see what happens. That way, we’ll see our improvements when we add lighting, increase the geometry resolution, and add textures.</p><p>What we need to add to our scene is a <a href=\"https://threejs.org/docs/?q=mesh#api/en/objects/Mesh\">Mesh</a>, which is an object that can be rendered. A mesh requires a geometry, aka a shape, and a material, aka how it looks.</p><p>For our geometry, we’ll make a <a href=\"https://threejs.org/docs/?q=geometry#api/en/geometries/SphereGeometry\">SphereGeometry</a>. The constructor takes arguments for its radius, the number of segments it uses along its width, and the number of segments it uses along its height. Let’s give it a raidus of <code class=\"language-plaintext highlighter-rouge\">1</code> for simplicity, and <code class=\"language-plaintext highlighter-rouge\">5</code> segments in each direction, so that it looks chunky for now.</p><p>For our material, we’ll make a simple <a href=\"https://threejs.org/docs/?q=geometry#api/en/geometries/SphereGeometry\">MeshStandardMaterial</a>. We’ll add some more fancy features to it later.</p><p>Now we can make our “sphere” mesh and add it to our scene:</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">geometry</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">THREE</span><span class=\"p\">.</span><span class=\"nx\">SphereGeometry</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">);</span><span class=\"kd\">const</span> <span class=\"nx\">material</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">THREE</span><span class=\"p\">.</span><span class=\"nx\">MeshStandardMaterial</span><span class=\"p\">();</span><span class=\"kd\">const</span> <span class=\"nx\">sphere</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">THREE</span><span class=\"p\">.</span><span class=\"nx\">Mesh</span><span class=\"p\">(</span><span class=\"nx\">geometry</span><span class=\"p\">,</span> <span class=\"nx\">material</span><span class=\"p\">);</span><span class=\"nx\">group</span><span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"nx\">sphere</span><span class=\"p\">);</span></code></pre></div></div><p>Now you should see a weird chunky dark thing on your screen. Why is it pitch black? Because we don’t have any lighting yet! Let’s add that next.</p><h2 id=\"adding-some-lighting\">Adding some lighting</h2><p>The most basic type of lighting we can add is <a href=\"https://threejs.org/docs/?q=ambient#api/en/lights/AmbientLight\">ambient lighting</a>, which adds a little bit of light to everything in the scene equally. This mimics how a little bit of light bounces around everywhere when we’re not in a pitch-black room, though there is no such thing as ambient lighting in real life. To add ambient lighting, all we need to do is choose its colour and add it to the scene. (Feel free to mess around with its colour!)</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">ambientLight</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">THREE</span><span class=\"p\">.</span><span class=\"nx\">AmbientLight</span><span class=\"p\">(</span><span class=\"mh\">0x404040</span><span class=\"p\">);</span> <span class=\"c1\">// soft white light</span><span class=\"nx\">scene</span><span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"nx\">ambientLight</span><span class=\"p\">);</span></code></pre></div></div><p>Now our sphere is no longer pitch-black! Let’s make even more interesting lighting though, by adding… the sun! In real life, the sun is so far away that it feels less like a point light and more like light coming from a certain direction, so we’ll use a <a href=\"https://threejs.org/docs/?q=direction#api/en/lights/DirectionalLight\">DirectionalLight</a>. Feel free to position it how you want, but we’ll give you some coordinates that look okay for us. Once we position the light, we’ll make it point at our sphere by setting its <code class=\"language-plaintext highlighter-rouge\">target</code>.</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nb\">sun</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">THREE</span><span class=\"p\">.</span><span class=\"nx\">DirectionalLight</span><span class=\"p\">(</span><span class=\"mh\">0xffffff</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">);</span>  <span class=\"c1\">// colour and intensity</span><span class=\"nb\">sun</span><span class=\"p\">.</span><span class=\"nx\">target</span> <span class=\"o\">=</span> <span class=\"nx\">sphere</span><span class=\"p\">;</span>  <span class=\"c1\">// point at sphere</span><span class=\"nb\">sun</span><span class=\"p\">.</span><span class=\"nx\">position</span><span class=\"p\">.</span><span class=\"kd\">set</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">);</span>  <span class=\"c1\">// move right, up, forward</span><span class=\"nx\">scene</span><span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"nb\">sun</span><span class=\"p\">);</span></code></pre></div></div><p>Now we have a nice, thoroughly illuminated, white potato! Congrats!</p><h2 id=\"returning-to-the-sphere---materials-and-resolution\">Returning to the sphere - materials and resolution</h2><p>To make our sphere look more sphere-y, let’s increase its geometry resolution. We can do this by changing its segment parameters from 5 up to a bigger number, so that it’s less blocky.</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">geometry</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">THREE</span><span class=\"p\">.</span><span class=\"nx\">SphereGeometry</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">);</span>  <span class=\"c1\">// 40 segments in each direction</span></code></pre></div></div><p>Let’s also make it into a globe, by giving it a texture. We got our textures from <a href=\"http://planetpixelemporium.com/earth.html\">this</a> website, we downloaded their 1K versions, but feel free to find your own. What we really need is a colour map (aka what we normally call a texture) and a bump map.</p><p>We can load them onto our sphere by modifying our Material object to load a <code class=\"language-plaintext highlighter-rouge\">map</code> and a <code class=\"language-plaintext highlighter-rouge\">bumpMap</code>:</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">material</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">THREE</span><span class=\"p\">.</span><span class=\"nx\">MeshStandardMaterial</span><span class=\"p\">({</span>    <span class=\"na\">map</span><span class=\"p\">:</span> <span class=\"k\">new</span> <span class=\"nx\">THREE</span><span class=\"p\">.</span><span class=\"nx\">TextureLoader</span><span class=\"p\">().</span><span class=\"nx\">load</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">./img/globe.jpg</span><span class=\"dl\">'</span><span class=\"p\">),</span>    <span class=\"na\">bumpMap</span><span class=\"p\">:</span> <span class=\"k\">new</span> <span class=\"nx\">THREE</span><span class=\"p\">.</span><span class=\"nx\">TextureLoader</span><span class=\"p\">().</span><span class=\"nx\">load</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">./img/earthbump1k.jpg</span><span class=\"dl\">'</span><span class=\"p\">),</span>    <span class=\"na\">bumpScale</span><span class=\"p\">:</span> <span class=\"mf\">0.05</span><span class=\"p\">,</span>  <span class=\"c1\">// how bumpy our bump map will make our sphere</span><span class=\"p\">});</span></code></pre></div></div><p>Now our sphere should look like the earth! If you’re curious what the bump map is doing, I recommend you remove the image texture and take a look. The purpose of the bump map is to make the sphere look bumpy, and react to the ligthing as if it has the geometry of the texture (e.g. the mountains and valleys on earth), but without us having to change the actual geometry of our mesh. So our sphere is still geometrically a sphere, but it reflects light as if it’s bumpy!</p><h3 id=\"extra-making-the-sun-follow-our-camera-around\">Extra: making the sun follow our camera around</h3><p>Now that our Earth looks cool, we might wanna revolve around and look at every little bit of it. But some parts are pretty dark. It’s pretty frustrating trying to look at the parts where the sun don’t shine, so let’s make our sun follow our camera around. We can do this by adding the sun to the <code class=\"language-plaintext highlighter-rouge\">camera</code> object instead of the <code class=\"language-plaintext highlighter-rouge\">scene</code> object, so that the camera is the “parent” pulling the sun around with it like a kid at Home Depot.</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nb\">sun</span> <span class=\"o\">=</span> <span class=\"p\">...</span><span class=\"c1\">// scene.add(sun);  // fixed sun</span><span class=\"nx\">camera</span><span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"nb\">sun</span><span class=\"p\">);</span>    <span class=\"c1\">// sun follows camera</span></code></pre></div></div><h3 id=\"extra-making-the-sphere-rotate\">Extra: Making the sphere rotate</h3><p>I think it’ll be pretty cool if the Earth was slowly rotating, so let’s add that in. All we need to do is update our <code class=\"language-plaintext highlighter-rouge\">animate()</code> function to rotate our object group:</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nx\">animate</span><span class=\"p\">()</span> <span class=\"p\">{</span>    <span class=\"p\">...</span>    <span class=\"nx\">group</span><span class=\"p\">.</span><span class=\"nx\">rotation</span><span class=\"p\">.</span><span class=\"nx\">y</span> <span class=\"o\">+=</span> <span class=\"mf\">0.0025</span><span class=\"p\">;</span><span class=\"p\">}</span></code></pre></div></div><p>We increment the y-axis rotation because this will make it revolve around the vertical axis. You can imagine a skewer sticking through the Earth vertically, and spinning it around on that axis.</p><h2 id=\"adding-simple-markers-for-places\">Adding simple markers for places</h2><p>Let’s add markers to our globe to point out some important places. Why are these places important? You’ll see at 4:36 AM GMT on July 26th 2025!</p><p>We’ve made the <code class=\"language-plaintext highlighter-rouge\">addMarker()</code> function to do most of this for you, though we left out the actual marker. For simplicity, let’s make it a sphere. But since it’ll be intersecting the surface of the Earth, it’ll look like a half-sphere, which looks kinda cool.</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">let</span> <span class=\"nx\">mesh</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">THREE</span><span class=\"p\">.</span><span class=\"nx\">Mesh</span><span class=\"p\">(</span>    <span class=\"k\">new</span> <span class=\"nx\">THREE</span><span class=\"p\">.</span><span class=\"nx\">SphereGeometry</span><span class=\"p\">(</span><span class=\"mf\">0.015</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">),</span>  <span class=\"c1\">// tiny and round</span>    <span class=\"k\">new</span> <span class=\"nx\">THREE</span><span class=\"p\">.</span><span class=\"nx\">MeshStandardMaterial</span><span class=\"p\">({</span> <span class=\"na\">color</span><span class=\"p\">:</span> <span class=\"nx\">markerColor</span> <span class=\"p\">})</span><span class=\"p\">);</span></code></pre></div></div><p>Now we can add our markers by simply specifying their names, locations, and colours.</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// add markers to cool cities</span><span class=\"nx\">addMarker</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Ottawa</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"mf\">45.4215</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">75.6972</span><span class=\"p\">,</span> <span class=\"mh\">0xff0000</span><span class=\"p\">,</span> <span class=\"nx\">font</span><span class=\"p\">,</span> <span class=\"nx\">group</span><span class=\"p\">);</span><span class=\"nx\">addMarker</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Nairobi</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">1.286389</span><span class=\"p\">,</span> <span class=\"mf\">36.817223</span><span class=\"p\">,</span> <span class=\"mh\">0x0000ff</span><span class=\"p\">,</span> <span class=\"nx\">font</span><span class=\"p\">,</span> <span class=\"nx\">group</span><span class=\"p\">);</span><span class=\"nx\">addMarker</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Rio de Janeiro</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">22.908333</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">43.196388</span><span class=\"p\">,</span> <span class=\"mh\">0x00ff00</span><span class=\"p\">,</span> <span class=\"nx\">font</span><span class=\"p\">,</span> <span class=\"nx\">group</span><span class=\"p\">);</span></code></pre></div></div><p>We chose some wacky colours here, but try changing them all to black for a sleeker look.</p><h2 id=\"fin\">Fin</h2><p>That’s our basic globe widget! It was inspired particularly by the one on the <a href=\"https://github.com/home\">GitHub homepage</a>, though we didn’t go through the same <a href=\"https://github.blog/2020-12-21-how-we-built-the-github-globe/\">process</a> since that’s kinda insane. Though you can definitely get results that look pretty good using better choice in textures, messing with lighting, and maybe adding your own shaders.</p><p>Thanks for following along!</p>",
            "url": "https://utcg.github.io/workshops/2022/04/07/globe",
            
            
            
            
            
            "date_published": "2022-04-07T00:00:00+02:00",
            "date_modified": "2022-04-07T00:00:00+02:00",
            
                "author":  {
                "name": "UofT Computer Graphics Club",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://utcg.github.io/workshops/2022/03/01/model1",
            "title": "Model UofT session 1 recording",
            "summary": "Modelling Robarts!",
            "content_text": "Model UofT - session 1Here’s the recording for the first session of UTCG’s Model UofT project, on February 28, 2022.",
            "content_html": "<h1 id=\"model-uoft---session-1\">Model UofT - session 1</h1><p>Here’s the recording for the first session of UTCG’s Model UofT project, on February 28, 2022.</p><video style=\"max-width:100%\" controls=\"\" src=\"https://github.com/UTCG/workshops/releases/download/v1.1.1/Model1.mp4\"></video>",
            "url": "https://utcg.github.io/workshops/2022/03/01/model1",
            
            
            
            
            
            "date_published": "2022-03-01T00:00:00+01:00",
            "date_modified": "2022-03-01T00:00:00+01:00",
            
                "author":  {
                "name": "UofT Computer Graphics Club",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://utcg.github.io/workshops/2022/02/10/shaders",
            "title": "Shaders",
            "summary": null,
            "content_text": "UTCG Shaders WorkshopIntroWhat are we gonna cover?This workshop covers the basics of 2D shader programming in GLSL. We’re hoping that by the end of the workshop, you have a good enough grasp on shader programming that you can make your own animated noise art, and get started working on more complicated shaders for your own graphics and game development projects (or Minecraft). Here are some examples of shaders we made using only the techniques covered in this workshop:(we’ve turned off autoplay for this one, make sure to click the ⏮ button to restart and then the ▶️ button to play it)We hope that you follow along through the code during the workshop, whether you’re writing it yourself with us or uncommenting lines as we write them. Below is all the code we’ll be using:  Part 1: Mandelbrot          Minimal starter code: https://www.shadertoy.com/view/NdSyW3      Starter code with finished example commented out: https://www.shadertoy.com/view/NdsyDX      Finished code: https://www.shadertoy.com/view/fsSyW3        Part 2: Clock          Minimal starter code: https://www.shadertoy.com/view/NsSyW3      Starter code with finished example commented out: https://www.shadertoy.com/view/fsByW3      Finished code: https://www.shadertoy.com/view/fdByW3        Part 3: Noise art          Starter code: https://www.shadertoy.com/view/7s2yzy      Example finished code: https://www.shadertoy.com/view/ssScDw        Competition          Starter code: https://www.shadertoy.com/view/fsBcWd      What is a shader?A pixel shader (aka fragment shader) is code that runs for each pixel being rendered. There are other types of shaders (e.g. vertex shaders, geometry shaders, etc) but we won’t cover them in this workshop. Generally, they’re code that runs on the GPU, usually for rendering graphics. In games, they’re usually used for lighting effects (they are called shaders) and other fancy effects at the end of the rendering pipeline. GPUs are great for shaders, because they’re made for doing similar work for lots of different inputs - in this case, they’ll run the same shader code for each pixel on the screen.Coding shadersShaders are usually written in GLSL, which is OpenGL Shading Language. It’s kind of like C/C++. This is the language that Minecraft shaders use!One important thing to note is that it does not automatically convert between integers and floats. So it will throw an error if you do something like float x = 2; or float y = M_PI / 2. To deal with this, always put a . after an integer, e.g. float x = 2. and float y = M_PI / 2..Fragment shader basics, Transformations, Colour - Mandelbrot SetTo learn the basics, let’s start by rendering the Mandelbrot set. We’ve provided some starter code, linked below. We won’t be paying much attention to the mathematics behind the Mandelbrot set, so the mandel() function is provided (and you don’t need to understand it).Code:  Minimal starter code: https://www.shadertoy.com/view/NdSyW3  Starter code with finished example commented out: https://www.shadertoy.com/view/NdsyDX  Finished code: https://www.shadertoy.com/view/fsSyW3What does our shader need to do?Our fragment shader’s input is a pixel on the screen and its output is its colour, as a 4D RGBA (Red/Green/Blue/Alpha) vector.void mainImage( out vec4 fragColor, in vec2 fragCoord ){    ...}We’ve given a variable vec2 uv to represent the transformed coordinates of a pixel. We’ll use it and mandel() to calculate the colour for each pixel.void mainImage( out vec4 fragColor, in vec2 fragCoord ){    vec2 uv = fragCoord/iResolution.x;    // mandel returns a value between 0 and 1    float value = mandel(uv.x, uv.y);    vec3 col = vec3(value, value, value);    fragColor = vec4(col, 1.);}Since we’ve put value into the R/G/B parts of col, the resulting image should be in greyscale.TransformationWe mentioned that uv are the transformed coordinates. You might recall from high school that we can transform coordinates by multiplying/dividing our vector by a number to stretch, or by adding/subtracting another vector to shift. Try doing this yourself to get the whole set in the frame!void mainImage( out vec4 fragColor, in vec2 fragCoord ){    vec2 uv = vec2(fragCoord.x / hrztl_stretch - hrztl_shift,                   fragCoord.y / vrtcl_stretch - vrtcl_shift);    ...}Working with colour - mix()We can make other colours by putting different values into the R/G/B parts of col, e.g. red = vec3(1., .5, .5) or blue = vec3(.25, .5, 1.).We can also interpolate between colours (or really anything) using the GLSL function mix(). The first two arguments are the values we want to interpolate between, and the last is the “slider value” to “slide” between the two, from 0 to 1.vec3 red = vec3(1., .5, .5);vec3 blue = vec3(.25, .5, 1.);vec3 col = mix(red, blue, mandel);ExtrasThrow sin(), cos(), and iTime into your colour calculation and we’ve got a rave going!Rotation, Time, Circles - Analogue ClockOur next example is an analogue clock.Code:  Minimal starter code: https://www.shadertoy.com/view/NsSyW3  Starter code with finished example commented out: https://www.shadertoy.com/view/fsByW3  Finished code: https://www.shadertoy.com/view/fdByW3Note that this time we’ve transformed the pixel coordinates for you, so that the centre of the screen has coordinates $(0, 0)$.Creating the clock faceClocks are circles. This is basic anthropology. But what is a circle?A circle is all the points within some radius $r$ of the centre of the circle $\\mathbf c$. So if we have a pixel whose coordinates are $\\mathbf p = (x, y)$, then we can check if the pixel is within the circle by checking if $\\text{length}(\\mathbf p - \\mathbf c) &lt; r$. Let’s make a function to do that using the GLSL length() function:bool isInCircle(vec2 centre, float radius, vec2 point){    // return true if point is closer to centre than r    return length(point - centre) &lt; radius;}Let’s set the centre of our clock to be the centre of the screen, and give it a radius of 0.4:vec2 clockCentre = vec2(0, 0);float clockRadius = 0.4;And now, let’s use our circle function to colour the clock face red:if (isInCircle(clockCentre, clockRadius, uv)){    col = vec3(1., 0.5, 0.5);}If you render now, you should see a big red circle in the middle of the screen!Initializing the seconds handThe initial position of a clock hand, at time 0 is pointing straight up, so let’s create an up vector to represent that:vec2 up = vec2(0, 0.2);Now let’s render it as a small white dot, the same way we rendered the clock face:vec2 secondsHand = up;float handRadius = 0.02;// put the following code AFTER the clock face colour codeif (isInCircle(secondsHand, handRadius, uv)){    col = vec3(1, 1, 1);}Making it moveUsing linear algebra, we’ve created a rot() function which returns a matrix that will rotate a 2D vector clockwise by a given angle in radians (more on rotation matrices). To get a rotated vector, you multiply a rotation matrix times a vector. For example,vec2 northEast = vec2(1, 1);vec2 southEast = rot(0.5 * M_PI) * northEast;In our case, we want to rotate our clock hand by some angle based on time. GLSL gives us a handy variable iTime, which is the time in seconds since we started the shader. Let’s try it out by editing our seconds hand’s position:vec2 secondsHand = rot(iTime) * up;Getting the speed rightGreat, it’s rotating! But it’s the wrong speed. One full rotation is $2\\pi$ (aka 2. * M_PI) radians, and it takes 60 seconds, so we’ll rotate our seconds hand correspondingly:float seconds = iTime;// 60 seconds for a rotationvec2 secondsHand = rot(seconds / 60. * 2. * M_PI) * up;Now we have a seconds hand! Let’s try a minutes hand next, using the same strategy:float minutes = seconds / 60.// 60 mins for a rotationvec2 minutesHand = rot(minutes / 60. * 2. * M_PI) * up;...if (isInCircle(minutesHand, handRadius, uv)){    col = vec3(1, 1, 1);}Try doing an hour hand yourself!ExtrasTo make the clock show the actual time, take a look at the GLSL iDate variable. Note that this is a 4D vector. To make it even more clock-like, see if you can use the GLSL floor() function to make the seconds hand “tick” instead of rotating smoothly.You can also make it look better by changing the lengths of the hands, so that they never overlap. Other aesthetic upgrades could be a bezel, or patterns on the clock face. Numbers are a bit more difficult, but look into textures if you have some time and wanna try it out.Using sin() and cos() creatively - Noise artThe goal of this workshop was to give you enough shaders knowledge to make cool noise art, like this:How do we do this?…Just kinda messing around tbh.Code:  Starter code for example: https://www.shadertoy.com/view/7s2yzy  Example finished code: https://www.shadertoy.com/view/ssScDw  Competition starter code: https://www.shadertoy.com/view/fsBcWdCreating patterns with functionsWe know we can mix() two colours as long as we have a value between 0 and 1. And since the trigonometric functions sin() and cos() are periodic, we can use them to create patterns. We can also combine them in weird ways to get unexpected patterns.float noiseFunc(float x, float y){    return something;}sin() and cos() both range between -1 and 1, so we need to transform them to the range we want.float noiseFunc(float x, float y){    float val = cos(...);    // transform cos value so that it's between 0 and 1    return 0.5 + 0.5 * val;}What do we put inside that cos() function? Anything basically. Go crazy. Just do random stuff. Better if you mix x, y, iTime, more trigonometry, etc in there. Here’s what I did for the example above:float noiseFunc(float x, float y){    float val = cos(x                    + sin(2. * y + cos(x + iTime))                    + cos(iTime + x + cos(4. * y))                    + 10. * sin(x)                    );    // transform cos value so that it's between 0 and 1    return 0.5 + 0.5 * val;}Feel free to mix more colours, to use if/else to render different things for different parts of the screen, use GLSL functions such as length(), floor(), and mix(), use the functions we provided earlier such as mandel(), rot(), and isInCircle(), and etc. Go crazy.When you’re done, submit your shader to the competition by listing it as “public” and adding the tag utcg2022.The endThat’s the end of the workshop, hope you learned a lot and had fun!What you can do with thisIf you scroll down on Shadertoy, at the bottom of the screen you’ll see a link to a Screensaver plugin made by Kosro, which can be used to turn your shaders into a screensaver for Windows when installed on top of Wallpaper Engine.Where to learn moreThe Book of Shaders is an incomplete resource on GLSL programming, but the pages it does have are excellent quality and easy to follow. They’re especially great if you’re interested in more complex noise art, like this from page 11.The real heavyweight in shaders is Inigo Quiles, co-creator of Shadertoy. His website has articles, tutorials, demos, and more of graphics programming, including more noise art like this.There are many more tutorials on shaders that are just a search away, since GLSL is a very widely-used technology. Plus, they’re covered a little bit in CSC317 - Computer Graphics (formerly CSC418).Thanks!If you enjoyed this workshop, make sure you follow us on social media, join our mailing list, and join our Discord to keep up with our other events! You can find all of it on our website utcg.club.Recording of the workshop from February 2022Here’s a recording of the workshop as it ran on February 10, 2021.If the video doesn’t work you can download it.",
            "content_html": "<style>    .red > code {        color: #FF8080;    }    .blue > code {        color: #4080FF;    }</style><h1 id=\"utcg-shaders-workshop\">UTCG Shaders Workshop</h1><h2 id=\"intro\">Intro</h2><h3 id=\"what-are-we-gonna-cover\">What are we gonna cover?</h3><p>This workshop covers the basics of 2D shader programming in GLSL. We’re hoping that by the end of the workshop, you have a good enough grasp on shader programming that you can make your own animated noise art, and get started working on more complicated shaders for your own graphics and game development projects (or Minecraft). Here are some examples of shaders we made using only the techniques covered in this workshop:</p><iframe width=\"640\" height=\"360\" frameborder=\"0\" src=\"https://www.shadertoy.com/embed/fsSyDd?gui=true&amp;t=10&amp;paused=true&amp;muted=false\" allowfullscreen=\"\"></iframe><p>(we’ve turned off autoplay for this one, make sure to click the ⏮ button to restart and then the ▶️ button to play it)</p><iframe width=\"640\" height=\"360\" frameborder=\"0\" src=\"https://www.shadertoy.com/embed/sdSczG?gui=true&amp;t=10&amp;paused=false&amp;muted=false\" allowfullscreen=\"\"></iframe><iframe width=\"640\" height=\"360\" frameborder=\"0\" src=\"https://www.shadertoy.com/embed/fdSyDd?gui=true&amp;t=10&amp;paused=false&amp;muted=false\" allowfullscreen=\"\"></iframe><p>We hope that you follow along through the code during the workshop, whether you’re writing it yourself with us or uncommenting lines as we write them. Below is all the code we’ll be using:</p><ul>  <li>Part 1: Mandelbrot    <ul>      <li>Minimal starter code: <a href=\"https://www.shadertoy.com/view/NdSyW3\">https://www.shadertoy.com/view/NdSyW3</a></li>      <li>Starter code with finished example commented out: <a href=\"https://www.shadertoy.com/view/NdsyDX\">https://www.shadertoy.com/view/NdsyDX</a></li>      <li>Finished code: <a href=\"https://www.shadertoy.com/view/fsSyW3\">https://www.shadertoy.com/view/fsSyW3</a></li>    </ul>  </li>  <li>Part 2: Clock    <ul>      <li>Minimal starter code: <a href=\"https://www.shadertoy.com/view/NsSyW3\">https://www.shadertoy.com/view/NsSyW3</a></li>      <li>Starter code with finished example commented out: <a href=\"https://www.shadertoy.com/view/fsByW3\">https://www.shadertoy.com/view/fsByW3</a></li>      <li>Finished code: <a href=\"https://www.shadertoy.com/view/fdByW3\">https://www.shadertoy.com/view/fdByW3</a></li>    </ul>  </li>  <li>Part 3: Noise art    <ul>      <li>Starter code: <a href=\"https://www.shadertoy.com/view/7s2yzy\">https://www.shadertoy.com/view/7s2yzy</a></li>      <li>Example finished code: <a href=\"https://www.shadertoy.com/view/ssScDw\">https://www.shadertoy.com/view/ssScDw</a></li>    </ul>  </li>  <li>Competition    <ul>      <li>Starter code: <a href=\"https://www.shadertoy.com/view/fsBcWd\">https://www.shadertoy.com/view/fsBcWd</a></li>    </ul>  </li></ul><h3 id=\"what-is-a-shader\">What is a shader?</h3><p>A <em>pixel shader</em> (aka <em>fragment shader</em>) is code that runs for each pixel being rendered. There are other types of shaders (e.g. vertex shaders, geometry shaders, etc) but we won’t cover them in this workshop. Generally, they’re code that runs on the GPU, usually for rendering graphics. In games, they’re usually used for lighting effects (they are called shaders) and other fancy effects at the end of the rendering pipeline. GPUs are great for shaders, because they’re made for doing similar work for lots of different inputs - in this case, they’ll run the same shader code for each pixel on the screen.</p><h3 id=\"coding-shaders\">Coding shaders</h3><p>Shaders are usually written in <em>GLSL</em>, which is <em>OpenGL Shading Language</em>. It’s kind of like C/C++. This is the language that Minecraft shaders use!</p><p>One important thing to note is that it does not automatically convert between integers and floats. So it will throw an error if you do something like <code class=\"language-plaintext highlighter-rouge\">float x = 2;</code> or <code class=\"language-plaintext highlighter-rouge\">float y = M_PI / 2</code>. To deal with this, always put a <code class=\"language-plaintext highlighter-rouge\">.</code> after an integer, e.g. <code class=\"language-plaintext highlighter-rouge\">float x = 2.</code> and <code class=\"language-plaintext highlighter-rouge\">float y = M_PI / 2.</code>.</p><h2 id=\"fragment-shader-basics-transformations-colour---mandelbrot-set\">Fragment shader basics, Transformations, Colour - Mandelbrot Set</h2><p>To learn the basics, let’s start by rendering the <a href=\"https://en.wikipedia.org/wiki/Mandelbrot_set\">Mandelbrot set</a>. We’ve provided some starter code, linked below. We won’t be paying much attention to the mathematics behind the Mandelbrot set, so the <code class=\"language-plaintext highlighter-rouge\">mandel()</code> function is provided (and you don’t need to understand it).</p><iframe width=\"640\" height=\"360\" frameborder=\"0\" src=\"https://www.shadertoy.com/embed/fsSyW3?gui=true&amp;t=10&amp;paused=true&amp;muted=false\" allowfullscreen=\"\"></iframe><p>Code:</p><ul>  <li>Minimal starter code: <a href=\"https://www.shadertoy.com/view/NdSyW3\">https://www.shadertoy.com/view/NdSyW3</a></li>  <li>Starter code with finished example commented out: <a href=\"https://www.shadertoy.com/view/NdsyDX\">https://www.shadertoy.com/view/NdsyDX</a></li>  <li>Finished code: <a href=\"https://www.shadertoy.com/view/fsSyW3\">https://www.shadertoy.com/view/fsSyW3</a></li></ul><h3 id=\"what-does-our-shader-need-to-do\">What does our shader need to do?</h3><p>Our fragment shader’s input is a pixel on the screen and its output is its colour, as a 4D RGBA (Red/Green/Blue/Alpha) vector.</p><div class=\"language-glsl highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">void</span> <span class=\"nf\">mainImage</span><span class=\"p\">(</span> <span class=\"k\">out</span> <span class=\"kt\">vec4</span> <span class=\"n\">fragColor</span><span class=\"p\">,</span> <span class=\"k\">in</span> <span class=\"kt\">vec2</span> <span class=\"n\">fragCoord</span> <span class=\"p\">)</span><span class=\"p\">{</span>    <span class=\"p\">...</span><span class=\"p\">}</span></code></pre></div></div><p>We’ve given a variable <code class=\"language-plaintext highlighter-rouge\">vec2 uv</code> to represent the transformed coordinates of a pixel. We’ll use it and <code class=\"language-plaintext highlighter-rouge\">mandel()</code> to calculate the colour for each pixel.</p><div class=\"language-glsl highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">void</span> <span class=\"nf\">mainImage</span><span class=\"p\">(</span> <span class=\"k\">out</span> <span class=\"kt\">vec4</span> <span class=\"n\">fragColor</span><span class=\"p\">,</span> <span class=\"k\">in</span> <span class=\"kt\">vec2</span> <span class=\"n\">fragCoord</span> <span class=\"p\">)</span><span class=\"p\">{</span>    <span class=\"kt\">vec2</span> <span class=\"n\">uv</span> <span class=\"o\">=</span> <span class=\"n\">fragCoord</span><span class=\"o\">/</span><span class=\"n\">iResolution</span><span class=\"p\">.</span><span class=\"n\">x</span><span class=\"p\">;</span>    <span class=\"c1\">// mandel returns a value between 0 and 1</span>    <span class=\"kt\">float</span> <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">mandel</span><span class=\"p\">(</span><span class=\"n\">uv</span><span class=\"p\">.</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">uv</span><span class=\"p\">.</span><span class=\"n\">y</span><span class=\"p\">);</span>    <span class=\"kt\">vec3</span> <span class=\"n\">col</span> <span class=\"o\">=</span> <span class=\"kt\">vec3</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">);</span>    <span class=\"n\">fragColor</span> <span class=\"o\">=</span> <span class=\"kt\">vec4</span><span class=\"p\">(</span><span class=\"n\">col</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">.);</span><span class=\"p\">}</span></code></pre></div></div><p>Since we’ve put <code class=\"language-plaintext highlighter-rouge\">value</code> into the R/G/B parts of <code class=\"language-plaintext highlighter-rouge\">col</code>, the resulting image should be in greyscale.</p><h3 id=\"transformation\">Transformation</h3><p>We mentioned that <code class=\"language-plaintext highlighter-rouge\">uv</code> are the transformed coordinates. You might recall from high school that we can transform coordinates by multiplying/dividing our vector by a number to stretch, or by adding/subtracting another vector to shift. Try doing this yourself to get the whole set in the frame!</p><div class=\"language-glsl highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">void</span> <span class=\"nf\">mainImage</span><span class=\"p\">(</span> <span class=\"k\">out</span> <span class=\"kt\">vec4</span> <span class=\"n\">fragColor</span><span class=\"p\">,</span> <span class=\"k\">in</span> <span class=\"kt\">vec2</span> <span class=\"n\">fragCoord</span> <span class=\"p\">)</span><span class=\"p\">{</span>    <span class=\"kt\">vec2</span> <span class=\"n\">uv</span> <span class=\"o\">=</span> <span class=\"kt\">vec2</span><span class=\"p\">(</span><span class=\"n\">fragCoord</span><span class=\"p\">.</span><span class=\"n\">x</span> <span class=\"o\">/</span> <span class=\"n\">hrztl_stretch</span> <span class=\"o\">-</span> <span class=\"n\">hrztl_shift</span><span class=\"p\">,</span>                   <span class=\"n\">fragCoord</span><span class=\"p\">.</span><span class=\"n\">y</span> <span class=\"o\">/</span> <span class=\"n\">vrtcl_stretch</span> <span class=\"o\">-</span> <span class=\"n\">vrtcl_shift</span><span class=\"p\">);</span>    <span class=\"p\">...</span><span class=\"p\">}</span></code></pre></div></div><h3 id=\"working-with-colour---mix\">Working with colour - <code class=\"language-plaintext highlighter-rouge\">mix()</code></h3><p>We can make other colours by putting different values into the R/G/B parts of <code class=\"language-plaintext highlighter-rouge\">col</code>, e.g. <span class=\"red\"><code class=\"language-plaintext highlighter-rouge\">red = vec3(1., .5, .5)</code></span> or <span class=\"blue\"><code class=\"language-plaintext highlighter-rouge\">blue = vec3(.25, .5, 1.)</code></span>.</p><p>We can also interpolate between colours (or really anything) using the GLSL function <code class=\"language-plaintext highlighter-rouge\">mix()</code>. The first two arguments are the values we want to interpolate between, and the last is the “slider value” to “slide” between the two, from <code class=\"language-plaintext highlighter-rouge\">0</code> to <code class=\"language-plaintext highlighter-rouge\">1</code>.</p><div class=\"language-glsl highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">vec3</span> <span class=\"n\">red</span> <span class=\"o\">=</span> <span class=\"kt\">vec3</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">.,</span> <span class=\"p\">.</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"p\">.</span><span class=\"mi\">5</span><span class=\"p\">);</span><span class=\"kt\">vec3</span> <span class=\"n\">blue</span> <span class=\"o\">=</span> <span class=\"kt\">vec3</span><span class=\"p\">(.</span><span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"p\">.</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">.);</span><span class=\"kt\">vec3</span> <span class=\"n\">col</span> <span class=\"o\">=</span> <span class=\"n\">mix</span><span class=\"p\">(</span><span class=\"n\">red</span><span class=\"p\">,</span> <span class=\"n\">blue</span><span class=\"p\">,</span> <span class=\"n\">mandel</span><span class=\"p\">);</span></code></pre></div></div><h3 id=\"extras\">Extras</h3><p>Throw <code class=\"language-plaintext highlighter-rouge\">sin()</code>, <code class=\"language-plaintext highlighter-rouge\">cos()</code>, and <code class=\"language-plaintext highlighter-rouge\">iTime</code> into your colour calculation and we’ve got a rave going!</p><h2 id=\"rotation-time-circles---analogue-clock\">Rotation, Time, Circles - Analogue Clock</h2><p>Our next example is an analogue clock.</p><iframe width=\"640\" height=\"360\" frameborder=\"0\" src=\"https://www.shadertoy.com/embed/fdByW3?gui=true&amp;t=10&amp;paused=false&amp;muted=false\" allowfullscreen=\"\"></iframe><p>Code:</p><ul>  <li>Minimal starter code: <a href=\"https://www.shadertoy.com/view/NsSyW3\">https://www.shadertoy.com/view/NsSyW3</a></li>  <li>Starter code with finished example commented out: <a href=\"https://www.shadertoy.com/view/fsByW3\">https://www.shadertoy.com/view/fsByW3</a></li>  <li>Finished code: <a href=\"https://www.shadertoy.com/view/fdByW3\">https://www.shadertoy.com/view/fdByW3</a></li></ul><p>Note that this time we’ve transformed the pixel coordinates for you, so that the centre of the screen has coordinates $(0, 0)$.</p><h3 id=\"creating-the-clock-face\">Creating the clock face</h3><p>Clocks are circles. This is basic anthropology. But what is a circle?</p><p>A circle is all the points within some radius $r$ of the centre of the circle $\\mathbf c$. So if we have a pixel whose coordinates are $\\mathbf p = (x, y)$, then we can check if the pixel is within the circle by checking if $\\text{length}(\\mathbf p - \\mathbf c) &lt; r$. Let’s make a function to do that using the GLSL <code class=\"language-plaintext highlighter-rouge\">length()</code> function:</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>bool isInCircle(vec2 centre, float radius, vec2 point){    // return true if point is closer to centre than r    return length(point - centre) &lt; radius;}</code></pre></div></div><p>Let’s set the centre of our clock to be the centre of the screen, and give it a radius of 0.4:</p><div class=\"language-glsl highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">vec2</span> <span class=\"n\">clockCentre</span> <span class=\"o\">=</span> <span class=\"kt\">vec2</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"kt\">float</span> <span class=\"n\">clockRadius</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">.</span><span class=\"mi\">4</span><span class=\"p\">;</span></code></pre></div></div><p>And now, let’s use our circle function to colour the clock face red:</p><div class=\"language-glsl highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">isInCircle</span><span class=\"p\">(</span><span class=\"n\">clockCentre</span><span class=\"p\">,</span> <span class=\"n\">clockRadius</span><span class=\"p\">,</span> <span class=\"n\">uv</span><span class=\"p\">))</span><span class=\"p\">{</span>    <span class=\"n\">col</span> <span class=\"o\">=</span> <span class=\"kt\">vec3</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">.,</span> <span class=\"mi\">0</span><span class=\"p\">.</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">.</span><span class=\"mi\">5</span><span class=\"p\">);</span><span class=\"p\">}</span></code></pre></div></div><p>If you render now, you should see a big red circle in the middle of the screen!</p><h3 id=\"initializing-the-seconds-hand\">Initializing the seconds hand</h3><p>The initial position of a clock hand, at time 0 is pointing straight up, so let’s create an <code class=\"language-plaintext highlighter-rouge\">up</code> vector to represent that:</p><div class=\"language-glsl highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">vec2</span> <span class=\"n\">up</span> <span class=\"o\">=</span> <span class=\"kt\">vec2</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">.</span><span class=\"mi\">2</span><span class=\"p\">);</span></code></pre></div></div><p>Now let’s render it as a small white dot, the same way we rendered the clock face:</p><div class=\"language-glsl highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">vec2</span> <span class=\"n\">secondsHand</span> <span class=\"o\">=</span> <span class=\"n\">up</span><span class=\"p\">;</span><span class=\"kt\">float</span> <span class=\"n\">handRadius</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">.</span><span class=\"mo\">02</span><span class=\"p\">;</span><span class=\"c1\">// put the following code AFTER the clock face colour code</span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">isInCircle</span><span class=\"p\">(</span><span class=\"n\">secondsHand</span><span class=\"p\">,</span> <span class=\"n\">handRadius</span><span class=\"p\">,</span> <span class=\"n\">uv</span><span class=\"p\">))</span><span class=\"p\">{</span>    <span class=\"n\">col</span> <span class=\"o\">=</span> <span class=\"kt\">vec3</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"p\">}</span></code></pre></div></div><h3 id=\"making-it-move\">Making it move</h3><p>Using linear algebra, we’ve created a <code class=\"language-plaintext highlighter-rouge\">rot()</code> function which returns a matrix that will rotate a 2D vector clockwise by a given angle in radians (<a href=\"https://en.wikipedia.org/wiki/Rotation_matrix\">more on rotation matrices</a>). To get a rotated vector, you multiply a rotation matrix times a vector. For example,</p><div class=\"language-glsl highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">vec2</span> <span class=\"n\">northEast</span> <span class=\"o\">=</span> <span class=\"kt\">vec2</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"kt\">vec2</span> <span class=\"n\">southEast</span> <span class=\"o\">=</span> <span class=\"n\">rot</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">.</span><span class=\"mi\">5</span> <span class=\"o\">*</span> <span class=\"n\">M_PI</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">northEast</span><span class=\"p\">;</span></code></pre></div></div><p>In our case, we want to rotate our clock hand by some angle based on time. GLSL gives us a handy variable <code class=\"language-plaintext highlighter-rouge\">iTime</code>, which is the time in seconds since we started the shader. Let’s try it out by editing our seconds hand’s position:</p><div class=\"language-glsl highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">vec2</span> <span class=\"n\">secondsHand</span> <span class=\"o\">=</span> <span class=\"n\">rot</span><span class=\"p\">(</span><span class=\"n\">iTime</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">up</span><span class=\"p\">;</span></code></pre></div></div><h3 id=\"getting-the-speed-right\">Getting the speed right</h3><p>Great, it’s rotating! But it’s the wrong speed. One full rotation is $2\\pi$ (aka <code class=\"language-plaintext highlighter-rouge\">2. * M_PI</code>) radians, and it takes 60 seconds, so we’ll rotate our seconds hand correspondingly:</p><div class=\"language-glsl highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">float</span> <span class=\"n\">seconds</span> <span class=\"o\">=</span> <span class=\"n\">iTime</span><span class=\"p\">;</span><span class=\"c1\">// 60 seconds for a rotation</span><span class=\"kt\">vec2</span> <span class=\"n\">secondsHand</span> <span class=\"o\">=</span> <span class=\"n\">rot</span><span class=\"p\">(</span><span class=\"n\">seconds</span> <span class=\"o\">/</span> <span class=\"mi\">60</span><span class=\"p\">.</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">.</span> <span class=\"o\">*</span> <span class=\"n\">M_PI</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">up</span><span class=\"p\">;</span></code></pre></div></div><p>Now we have a seconds hand! Let’s try a minutes hand next, using the same strategy:</p><div class=\"language-glsl highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">float</span> <span class=\"n\">minutes</span> <span class=\"o\">=</span> <span class=\"n\">seconds</span> <span class=\"o\">/</span> <span class=\"mi\">60</span><span class=\"p\">.</span><span class=\"c1\">// 60 mins for a rotation</span><span class=\"kt\">vec2</span> <span class=\"n\">minutesHand</span> <span class=\"o\">=</span> <span class=\"n\">rot</span><span class=\"p\">(</span><span class=\"n\">minutes</span> <span class=\"o\">/</span> <span class=\"mi\">60</span><span class=\"p\">.</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">.</span> <span class=\"o\">*</span> <span class=\"n\">M_PI</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">up</span><span class=\"p\">;</span><span class=\"p\">...</span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">isInCircle</span><span class=\"p\">(</span><span class=\"n\">minutesHand</span><span class=\"p\">,</span> <span class=\"n\">handRadius</span><span class=\"p\">,</span> <span class=\"n\">uv</span><span class=\"p\">))</span><span class=\"p\">{</span>    <span class=\"n\">col</span> <span class=\"o\">=</span> <span class=\"kt\">vec3</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"p\">}</span></code></pre></div></div><p>Try doing an hour hand yourself!</p><h3 id=\"extras-1\">Extras</h3><p>To make the clock show the actual time, take a look at the GLSL <code class=\"language-plaintext highlighter-rouge\">iDate</code> variable. Note that this is a 4D vector. To make it even more clock-like, see if you can use the GLSL <code class=\"language-plaintext highlighter-rouge\">floor()</code> function to make the seconds hand “tick” instead of rotating smoothly.</p><p>You can also make it look better by changing the lengths of the hands, so that they never overlap. Other aesthetic upgrades could be a bezel, or patterns on the clock face. Numbers are a bit more difficult, but look into textures if you have some time and wanna try it out.</p><h2 id=\"using-sin-and-cos-creatively---noise-art\">Using <code class=\"language-plaintext highlighter-rouge\">sin()</code> and <code class=\"language-plaintext highlighter-rouge\">cos()</code> creatively - Noise art</h2><p>The goal of this workshop was to give you enough shaders knowledge to make cool noise art, like this:</p><iframe width=\"640\" height=\"360\" frameborder=\"0\" src=\"https://www.shadertoy.com/embed/ssScDw?gui=true&amp;t=10&amp;paused=false&amp;muted=false\" allowfullscreen=\"\"></iframe><p>How do we do this?</p><p>…</p><p>Just kinda messing around tbh.</p><p>Code:</p><ul>  <li>Starter code for example: <a href=\"https://www.shadertoy.com/view/7s2yzy\">https://www.shadertoy.com/view/7s2yzy</a></li>  <li>Example finished code: <a href=\"https://www.shadertoy.com/view/ssScDw\">https://www.shadertoy.com/view/ssScDw</a></li>  <li>Competition starter code: <a href=\"https://www.shadertoy.com/view/fsBcWd\">https://www.shadertoy.com/view/fsBcWd</a></li></ul><h3 id=\"creating-patterns-with-functions\">Creating patterns with functions</h3><p>We know we can <code class=\"language-plaintext highlighter-rouge\">mix()</code> two colours as long as we have a value between <code class=\"language-plaintext highlighter-rouge\">0</code> and <code class=\"language-plaintext highlighter-rouge\">1</code>. And since the trigonometric functions <code class=\"language-plaintext highlighter-rouge\">sin()</code> and <code class=\"language-plaintext highlighter-rouge\">cos()</code> are periodic, we can use them to create patterns. We can also combine them in weird ways to get unexpected patterns.</p><div class=\"language-glsl highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">float</span> <span class=\"nf\">noiseFunc</span><span class=\"p\">(</span><span class=\"kt\">float</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"kt\">float</span> <span class=\"n\">y</span><span class=\"p\">)</span><span class=\"p\">{</span>    <span class=\"k\">return</span> <span class=\"n\">something</span><span class=\"p\">;</span><span class=\"p\">}</span></code></pre></div></div><p><img src=\"https://upload.wikimedia.org/wikipedia/commons/7/71/Sine_cosine_one_period.svg\" alt=\"Sine and Cosine graph by Geek3 from Wikipedia\" /></p><p><code class=\"language-plaintext highlighter-rouge\">sin()</code> and <code class=\"language-plaintext highlighter-rouge\">cos()</code> both range between <code class=\"language-plaintext highlighter-rouge\">-1</code> and <code class=\"language-plaintext highlighter-rouge\">1</code>, so we need to transform them to the range we want.</p><div class=\"language-glsl highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">float</span> <span class=\"nf\">noiseFunc</span><span class=\"p\">(</span><span class=\"kt\">float</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"kt\">float</span> <span class=\"n\">y</span><span class=\"p\">)</span><span class=\"p\">{</span>    <span class=\"kt\">float</span> <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">cos</span><span class=\"p\">(...);</span>    <span class=\"c1\">// transform cos value so that it's between 0 and 1</span>    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">.</span><span class=\"mi\">5</span> <span class=\"o\">+</span> <span class=\"mi\">0</span><span class=\"p\">.</span><span class=\"mi\">5</span> <span class=\"o\">*</span> <span class=\"n\">val</span><span class=\"p\">;</span><span class=\"p\">}</span></code></pre></div></div><p>What do we put inside that <code class=\"language-plaintext highlighter-rouge\">cos()</code> function? Anything basically. Go crazy. Just do random stuff. Better if you mix <code class=\"language-plaintext highlighter-rouge\">x</code>, <code class=\"language-plaintext highlighter-rouge\">y</code>, <code class=\"language-plaintext highlighter-rouge\">iTime</code>, more trigonometry, etc in there. Here’s what I did for the example above:</p><div class=\"language-glsl highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">float</span> <span class=\"nf\">noiseFunc</span><span class=\"p\">(</span><span class=\"kt\">float</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"kt\">float</span> <span class=\"n\">y</span><span class=\"p\">)</span><span class=\"p\">{</span>    <span class=\"kt\">float</span> <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"n\">x</span>                    <span class=\"o\">+</span> <span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">.</span> <span class=\"o\">*</span> <span class=\"n\">y</span> <span class=\"o\">+</span> <span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">iTime</span><span class=\"p\">))</span>                    <span class=\"o\">+</span> <span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"n\">iTime</span> <span class=\"o\">+</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">.</span> <span class=\"o\">*</span> <span class=\"n\">y</span><span class=\"p\">))</span>                    <span class=\"o\">+</span> <span class=\"mi\">10</span><span class=\"p\">.</span> <span class=\"o\">*</span> <span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>                    <span class=\"p\">);</span>    <span class=\"c1\">// transform cos value so that it's between 0 and 1</span>    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">.</span><span class=\"mi\">5</span> <span class=\"o\">+</span> <span class=\"mi\">0</span><span class=\"p\">.</span><span class=\"mi\">5</span> <span class=\"o\">*</span> <span class=\"n\">val</span><span class=\"p\">;</span><span class=\"p\">}</span></code></pre></div></div><p>Feel free to mix more colours, to use if/else to render different things for different parts of the screen, use GLSL functions such as <code class=\"language-plaintext highlighter-rouge\">length()</code>, <code class=\"language-plaintext highlighter-rouge\">floor()</code>, and <code class=\"language-plaintext highlighter-rouge\">mix()</code>, use the functions we provided earlier such as <code class=\"language-plaintext highlighter-rouge\">mandel()</code>, <code class=\"language-plaintext highlighter-rouge\">rot()</code>, and <code class=\"language-plaintext highlighter-rouge\">isInCircle()</code>, and etc. Go crazy.</p><p>When you’re done, submit your shader to the competition by listing it as “public” and adding the tag <code class=\"language-plaintext highlighter-rouge\">utcg2022</code>.</p><h2 id=\"the-end\">The end</h2><p>That’s the end of the workshop, hope you learned a lot and had fun!</p><h3 id=\"what-you-can-do-with-this\">What you can do with this</h3><p>If you scroll down on Shadertoy, at the bottom of the screen you’ll see a link to a <a href=\"https://steamcommunity.com/sharedfiles/filedetails/?id=1726697188\">Screensaver</a> plugin made by <a href=\"https://www.shadertoy.com/user/kosro\">Kosro</a>, which can be used to turn your shaders into a screensaver for Windows when installed on top of <a href=\"https://store.steampowered.com/app/431960/Wallpaper_Engine/\">Wallpaper Engine</a>.</p><h3 id=\"where-to-learn-more\">Where to learn more</h3><p><a href=\"https://thebookofshaders.com/\">The Book of Shaders</a> is an incomplete resource on GLSL programming, but the pages it does have are excellent quality and easy to follow. They’re especially great if you’re interested in more complex noise art, like <a href=\"https://thebookofshaders.com/edit.php#11/lava-lamp.frag\">this</a> from page 11.</p><p>The real heavyweight in shaders is Inigo Quiles, co-creator of Shadertoy. <a href=\"https://www.iquilezles.org/index.html\">His website</a> has articles, tutorials, demos, and more of graphics programming, including more noise art like <a href=\"https://www.iquilezles.org/www/articles/warp/warp.htm\">this</a>.</p><p>There are many more tutorials on shaders that are just a search away, since GLSL is a very widely-used technology. Plus, they’re covered a little bit in <a href=\"https://github.com/alecjacobson/computer-graphics-csc317\">CSC317 - Computer Graphics</a> (formerly CSC418).</p><h3 id=\"thanks\">Thanks!</h3><p>If you enjoyed this workshop, make sure you follow us on social media, join our mailing list, and join our Discord to keep up with our other events! You can find all of it on our website <a href=\"https://utcg.club/\">utcg.club</a>.</p><h3 id=\"recording-of-the-workshop-from-february-2022\">Recording of the workshop from February 2022</h3><p>Here’s a recording of the workshop as it ran on February 10, 2021.</p><video style=\"max-width:100%\" controls=\"\" src=\"https://github.com/UTCG/workshops/releases/download/shaders_workshop/shaders_workshop.mp4\"></video><p>If the video doesn’t work you can <a href=\"https://github.com/UTCG/workshops/releases/download/shaders_workshop/shaders_workshop.mp4\">download it</a>.</p>",
            "url": "https://utcg.github.io/workshops/2022/02/10/shaders",
            
            
            
            
            
            "date_published": "2022-02-10T00:00:00+01:00",
            "date_modified": "2022-02-10T00:00:00+01:00",
            
                "author":  {
                "name": "UofT Computer Graphics Club",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://utcg.github.io/workshops/2021/11/01/blender-part2",
            "title": "Blender Workshop Part 2 Recording",
            "summary": "Part 2 Materials and Lighting!",
            "content_text": "UTCG Blender Violin Workshop Part 2Here’s the recording for Part 2 of UTCG’s Blender Workshop on October 29, 2021.If the video doesn’t work you can download it.You can also download the Blender file that we started with in the workshop!(You also might want this violin reference image, put it in the same folder as the .blend file)Here’s a finished render.",
            "content_html": "<h1 id=\"utcg-blender-violin-workshop-part-2\">UTCG Blender Violin Workshop Part 2</h1><p>Here’s the recording for Part 2 of UTCG’s Blender Workshop on October 29, 2021.</p><p>If the video doesn’t work you can <a href=\"https://github.com/UTCG/workshops/releases/download/v.1.0.2/Blender2.mp4\">download it</a>.</p><video style=\"max-width:100%\" controls=\"\" src=\"https://github.com/UTCG/workshops/releases/download/v.1.0.2/Blender2.mp4\"></video><p>You can also download the <a href=\"https://github.com/UTCG/workshops/releases/download/v.1.0.2/Workshop2Start.blend\">Blender file</a> that we started with in the workshop!(You also might want this <a href=\"https://upload.wikimedia.org/wikipedia/commons/1/1b/Violin_VL100.png\">violin reference image</a>, put it in the same folder as the .blend file)</p><p>Here’s a finished render.</p><p><img src=\"https://github.com/UTCG/workshops/releases/download/v.1.0.2/RenderTest.png\" width=\"400px\" /></p>",
            "url": "https://utcg.github.io/workshops/2021/11/01/blender-part2",
            
            
            
            
            
            "date_published": "2021-11-01T00:00:00+01:00",
            "date_modified": "2021-11-01T00:00:00+01:00",
            
                "author":  {
                "name": "UofT Computer Graphics Club",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://utcg.github.io/workshops/2021/10/24/blender-recording",
            "title": "Blender Workshop Recording",
            "summary": "Part 1 Modelling a violin!",
            "content_text": "UTCG Blender Violin WorkshopHere’s the recording for Part 1 of UTCG’s Blender Workshop on October 22, 2021.If the video doesn’t work you can download it.You can also download the Blender file that was used in the workshop!(You also might want this violin reference image, put it in the same folder as the .blend file)",
            "content_html": "<h1 id=\"utcg-blender-violin-workshop\">UTCG Blender Violin Workshop</h1><p>Here’s the recording for Part 1 of UTCG’s Blender Workshop on October 22, 2021.</p><p>If the video doesn’t work you can <a href=\"https://github.com/UTCG/workshops/releases/download/v1.0.1/Blender.mp4\">download it</a>.</p><video style=\"max-width:100%\" controls=\"\" src=\"https://github.com/UTCG/workshops/releases/download/v1.0.1/Blender.mp4\"></video><p>You can also download the <a href=\"https://github.com/UTCG/workshops/releases/download/v1.0.1/Workshop1.blend\">Blender file</a> that was used in the workshop!(You also might want this <a href=\"https://upload.wikimedia.org/wikipedia/commons/1/1b/Violin_VL100.png\">violin reference image</a>, put it in the same folder as the .blend file)</p>",
            "url": "https://utcg.github.io/workshops/2021/10/24/blender-recording",
            
            
            
            
            
            "date_published": "2021-10-24T00:00:00+02:00",
            "date_modified": "2021-10-24T00:00:00+02:00",
            
                "author":  {
                "name": "UofT Computer Graphics Club",
                "url": null,
                "avatar": null
                }
                
            
        }
    
    ]
}